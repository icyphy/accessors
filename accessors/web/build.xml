<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- $Id$ -->

<project basedir="." default="build" name="accessors" 
         >
  <!-- We can refer to any environment variable FOO as ${env.FOO} -->
  <property environment="env" />

  <!-- Location of the eduk sources.  eduk is the embedded duktape
       binary that does not use a file system.  Duktape is an embedded
       JavaScript interpreter.
  -->
  <property name="eduk.source" value="${basedir}/hosts/duktape/eduk"/>

  <!-- Location of the Duktape sources. -->
  <property name="duktape.source" value="${basedir}/hosts/duktape/duktape"/>

  <!-- The location of the jsdoc distribution, used by the jsdoc target. -->
  <property name="jsdoc.home" value="vendors/jsdoc" />

  <!-- The location of the Node.js binary. -->
  <property name="node.executable" value="node" />

  <!-- Location of the Rusteduk sources.
       Rusteduk is a Rust binary that invokes the C-based Duktape interpreter.
  -->
  <property name="rusteduk.source" value="${basedir}/hosts/duktape/rusteduk"/>

  <!-- Files to exclude. -->
  <patternset id="accessors.excludes">
    <exclude name="vendors/"/>
  </patternset>
  
  <!-- Path of JavaScript tests that are run by Duktape. -->
  <fileset id="test.duktape.files" dir="${basedir}/hosts">
    <include name="**/duktape/test/*.js"/>
    <patternset refid="accessors.excludes" />
  </fileset>

  <!-- Path of JavaScript tests that are run by mocha. -->
  <fileset id="test.mocha.files" dir="${basedir}">
    <include name="**/mocha/test*.js"/>
    <!-- hosts/browser/common is a symbolic link -->
    <exclude name="hosts/browser/common/test/mocha/test*.js"/>
    <patternset refid="accessors.excludes" />
  </fileset>

  <target name="build"
          depends="duktape, jsdoc, ptdoc, rusteduk"
          description="Compile the duktape binaries. Generate html and Ptdoc documentation.">
  </target>

  <target name="-cargo-in-path">
    <property environment="env" />
    <available file="cargo"
	       filepath="${env.PATH}"
	       property="cargo.path"/>
    <echo>
      cargo binary found: ${cargo.path}
      path: ${env.PATH}
    </echo>
  </target>
  
  <target name="-check-vendors-jsdoc" unless="vendors.jsdoc.exists">
    <available property="vendors.jsdoc.exists" file="${jsdoc.home}/jsdoc"/>
  </target>

  <target name="cleanAll" 
	  description="Remove the reports/ and doc/jsdoc directories.">
    <delete quiet="true" verbose="no" includeemptydirs="true">
      <fileset dir="${basedir}" includes="reports/**" defaultexcludes="false"/>
      <fileset dir="${basedir}" includes="doc/jsdoc/**" defaultexcludes="false"/>
    </delete>
  </target>

  <!-- Build eduk first because it updates the .h files from the .js files
       that are used by eduk and duk.
    --> 
  <target name="duktape"
          depends="eduk, duk, rusteduk"
          description="Build the duktape binaries">
  </target>

  <target name="duk"
	  depends="eduk"
          description="Build the duk binary.  Requires make and a C compiler.">
    <echo>The duk binary has more command line options that the eduk binary.
      The duk binary would not be deployed on an embedded machine.
    </echo>
    <exec dir="${duktape.source}"
	  failonerror="true"
          executable="make">
    </exec>
  </target>

  <target name="eduk"
          description="Build the eduk binary.  Requires xxd, make and gcc.">
    <echo>The eduk binary has fewer command line options than the duk binary.
      The eduk binary is what would be deployed on an embedded machine.
      The eduk binary can also be run from the command line.
    </echo>
    <exec dir="${eduk.source}"
          executable="make">
    </exec>
  </target>

  <target name="eduk.tcmalloc"
          description="Build the eduk with tcmalloc for heap profiling">
    <exec dir="${eduk.source}"
          failonerror="true"
          executable="make">
      <arg value="eduk.tcmalloc"/>
    </exec>
  </target>

  <target name="jsdoc"
          depends="vendors-jsdoc"
          description="Run jsdoc to generate documentation for JavaScript files."
          >
    <echo>Invoke jsdoc to generate documentation for .js files.
    The output appears in doc/jsdoc/index.html
    </echo>
    <exec executable="${jsdoc.home}/jsdoc"
          timeout="60000"
          >
      <arg value="--configure" />
      <arg value="jsdoc/jsdoc.json" />
      <arg value="--destination" />
      <arg value="doc/jsdoc" />
      <arg value="--readme" />
      <arg value="README.md" />
      <arg value="--recurse" />
      <arg value="--verbose" />
      <arg value="." />
    </exec>
  </target>

    <target name="ptdoc"
          depends="vendors-jsdoc"
          description="Invoke jsdoc to read *.js files and generate *PtDoc.xml files suitable for Ptolemy"
          >
    <echo>Invoke jsdoc to read *.js files and generate *PtDoc.xml files suitable for Ptolemy.
    See https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSDocSystems
    See jsdoc/jsdoc.json
    See jsdoc/plugins/accessorJSDocTags.js
    See jsdoc/templates/ptdoc/publish.js
    </echo>
    <exec executable="${jsdoc.home}/jsdoc">
      <arg value="--configure" />
      <arg value="jsdoc/jsdoc.json" />
      <arg value="--recurse" />
      <arg value="--template" />
      <arg value="jsdoc/templates/ptdoc" />
      <arg value="--verbose" />
      <arg value="." />
    </exec>
  </target>

  <target name="rusteduk"
	  depends="-cargo-in-path"
          description="Build the rusteduk binary.  Requires rustc.">
    <echo>
      The rusteduk binary is a Rust binary that invokes the C-based
      duktape JavaScript interpreter.  Rusteduk requires cargo and
      rustc.  The easiest way to get rustc is to install rustup, see
      https://www.rustup.rs

      Then run:
        rustup default stable
      See https://www.terraswarm.org/accessors/wiki/Main/RustHost
    </echo>
    <exec dir="${rusteduk.source}"
          failonerror="true"
          executable="make">
    </exec>
  </target>
  
  <target name="tests"
          depends="tests.browser, tests.capecode, tests.duk, tests.eduk, tests.mocha, tests.nashorn, tests.rusteduk"
          description="Run the Browser, Cape Code, Duktape, eduk, node, Nashorn and rusteduk host tests">
  </target>

  
  <target name="-ptII-exists" unless="ptII.exists">
    <available property="ptII.exists" file="${env.PTII}"/>
  </target>

  <target name="tests.capecode"
          depends="-ptII-exists"
          description="Run the Cape Code tests."
          if="${ptII.exists}">
    <echo>
      == tests.capecode ==
      These tests are only run if $PTII exists.
    </echo>
    <exec dir="${env.PTII}/ptolemy/actor/lib/jjs"
          executable="make">
      <arg value="tests" />
    </exec>
    <exec dir="${env.PTII}/org/terraswarm/accessor"
          executable="make">
      <arg value="tests" />
    </exec>
  </target>

  <target name="tests.browser"
          description="Test the browser host.">
    <echo>
      ==tests.browser==
      Run the Browser Accessor Host test
      The output will appear in reports/junit/browserTestResults.xml
      See https://www.terraswarm.org/accessors/wiki/VersionCurrent/RegressionTesting
    </echo>
    <mkdir dir="${basedir}/reports/junit"/>
    <echo> Running (cd hosts/browser/test; ${node.executable} regressionTestScript.js)</echo>
    <exec dir="hosts/browser/test"
	  executable="${node.executable}">
      <arg value="regressionTestScript.js"/>
    </exec>
  </target>

  <target name="tests.coverage"
          description="Use istanbul and mocha to generate code coverage for JavaScript tests.">
    <echo>
      ==tests.coverage==
      This target uses istanbul and mocha to generate code coverage for JavaScript tests
      This target requires setup:
        sudo npm install -g mocha
        sudo npm install -g istanbul
      The output will generated in the coverage/ directory.
      See https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSMocha
    </echo>

    <pathconvert refid="test.mocha.files"
		 pathsep=" "
		 property="converted"/>

    <exec executable="istanbul">
      <arg value="cover"/>
      <arg value="_mocha"/>
      <arg value="--"/>
      <arg line="${converted}"/>
    </exec>
  </target>

  <target name="tests.duk"
          depends="tests.duk.test, tests.duk.auto"
          description="Execute the duktape tests in duktape/test and test/auto.">
  </target>

  <target name="tests.duk.auto"
          depends="duk"
          description="Execute the duk tests in test/auto.">
    <!-- Use relative pathnames here so that we can look them up. -->
    <apply dir="."
           executable="hosts/duktape/duktape/duk"
           failonerror="true"
	   relative="true">
      <arg value="--accessor"/>
      <arg value="--timeout"/>
      <arg value="4000"/>
      <fileset dir=".">
	<!-- eduk does not have a separate eduk test directory, we just
	     run the accessors in test/auto instead.
	  --> 
	<include name="test/auto/*.js"/>
        <patternset refid="accessors.excludes" />
      </fileset>
    </apply>
  </target>
  
  <target name="tests.duk.test"
          depends="duk"
          description="Execute the duktape tests in duktape/test.">
    <apply dir="hosts"
           executable="duktape/duktape/duk"
           failonerror="true">
      <fileset dir="hosts">
        <include name="duktape/test/*.js"/>
        <patternset refid="accessors.excludes" />
      </fileset>
    </apply>
  </target>

  <target name="tests.eduk"
          depends="eduk"
          description="Execute the eduk tests.">
    <!-- Use relative pathnames here so that we can look them up. -->
    <apply dir="hosts"
           executable="duktape/eduk/eduk"
           failonerror="true"
	   relative="true">
      <arg value="--timeout"/>
      <arg value="4000"/>
      <fileset dir=".">
	<!-- eduk does not have a separate eduk test directory, we just
	     run the accessors in test/auto instead.
	  --> 
	<include name="test/auto/*.js"/>
        <patternset refid="accessors.excludes" />
      </fileset>
    </apply>
  </target>

  <target name="tests.jenkins"
          depends="tests.capecode, tests.browser, tests.duk, tests.eduk, tests.mocha.xml, tests.nashorn, tests.rusteduk, tests.coverage"
          description="Run the tests for Jenkins continuous integration">
    <echo>
      ==tests.jenkins==
      Run tests for the accessors continuous integration build.
      See http://terra.eecs.berkeley.edu:8080/job/accessors/
      
      This target generates JUnit xml-compatibile output where possible
      and runs test.coverage.
    </echo>
  </target>

  <target name="tests.mocha"
          description="Use mocha to test the Node host and generate output on stdout.">
    <echo>
      ==tests.mocha==
      This target uses mocha to test Node.js tests in **/mocha/test*.js files.
      To run just the composites, use "ant tests.mocha.composites"
      This target requires setup:
        sudo npm install -g mocha
        sudo npm install -g mocha-junit-reporter
      See https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSMocha
    </echo>

    <pathconvert refid="test.mocha.files"
		 pathsep=" "
		 property="converted"/>

    <echo> tests.mocha: running on ${converted}</echo>

    <exec executable="mocha">
      <arg line="${converted}"/>
    </exec>
  </target>

  <target name="tests.mocha.composites"
          description="Use mocha to test just the composite accessors and write to stdout.">
    <echo>
      ==tests.mocha.composite==
      This target uses mocha to run the composite accessors via
          hosts/node/test/mocha/testNodeAllAuto.js
      This target requires setup:
        sudo npm install -g mocha
      To run only the composite accessors in one directory:
        mocha hosts/node/test/testNodeOneAuto.js --Dauto=XXX/test/auto
      To run all the tests, use "ant tests.mocha" or "ant tests.mocha.xml"
      See https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSMocha
    </echo>

    <exec executable="mocha">
      <arg line="hosts/node/test/mocha/testNodeAllAuto.js"/>
    </exec>
  </target>

  <target name="tests.mocha.xml"
          description="Use mocha to test the Node Host and generate JUnit-compatible output.">
    <echo>
      ==tests.mocha.xml==
      This target uses mocha to test Node.js tests in **/mocha/test*.js files.
      The output is in JUnit-compatibile xml.
      This target requires setup:
        sudo npm install -g mocha
        sudo npm install -g mocha-junit-reporter
      See https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSMocha
    </echo>

    <pathconvert refid="test.mocha.files"
		 pathsep=" "
		 property="converted"/>
    <exec executable="mocha">
      <arg line="--bail"/>
      <arg value="--reporter"/>
      <arg value="mocha-junit-reporter"/>
      <arg value="--reporter-options"/>
      <arg value="mochaFile=reports/junit/mochaJUnit.xml,useFullSuiteTitle=true,suiteTitleSeparedBy=:"/>
      <arg line="${converted}"/>
    </exec>
  </target>

  <target name="tests.nashorn"
          depends="tests.nashorn.test, tests.nashorn.auto"
          description="Execute the Nashorn tests in nashorn/test and test/auto.">
  </target>
  
  <target name="tests.nashorn.auto"
          depends="-ptII-exists"
          description="Execute the nashorn tests in test/auto."
          if="${ptII.exists}">
    <!-- Use relative pathnames here so that we can look them up. -->
    <apply dir="."
           executable="hosts/nashorn/nashornAccessorHost"
           failonerror="true"
	   relative="true">
      <arg value="-e"/>
      <arg value="-timeout"/>
      <arg value="4000"/>
      <fileset dir=".">
	<include name="test/auto/*.js"/>
        <patternset refid="accessors.excludes" />
      </fileset>
    </apply>
  </target>

  <target name="tests.nashorn.test"
          depends="-ptII-exists"
          description="Execute the Nashorn tests in hosts/nashorn/test."
          if="${ptII.exists}">
    <echo>
      == tests.nashorn ==
      These tests are only run if $PTII exists.
      The Nashorn accessor host is a subset of the Cape Code accessor host
    </echo>
    <apply dir="hosts"
           executable="nashorn/nashornAccessorHost"
           failonerror="true">
      <arg value="-e"/>
      <arg value="-timeout"/>
      <arg value="4010"/>
      <fileset dir="hosts">
        <include name="nashorn/test/*.js"/>
	<exclude name="**/testNashornHost.js"/>
        <patternset refid="accessors.excludes" />
      </fileset>
    </apply>

    <echo>
      Running the Nashorn smoke test.  To replicate:
      cd hosts; ./nashorn/nashornAccessorHost -timeout 10000 hosts/nashorn/test/testNashornHost.js
    </echo>

    <exec dir="hosts"
          executable="nashorn/nashornAccessorHost">
      <arg value="-timeout"/>
      <arg value="1000"/>
      <arg value="hosts/nashorn/test/testNashornHost.js"/>
    </exec>
  </target>

  <target name="tests.rusteduk"
          depends="rusteduk"
          description="Execute the rusteduk tests.">
    <echo>
      == tests.rusteduk ==
      Rusteduk is an accessor written partially in Rust that uses Duktape as the JS engine.
    </echo>
    <!-- Use relative pathnames here so that we can look them up. -->
    <apply dir="hosts"
           executable="duktape/rusteduk/target/debug/examples/rusteduk"
           failonerror="true"
	   relative="true">
      <arg value="--timeout"/>
      <arg value="4000"/>
      <fileset dir=".">
	<!-- rusteduk does not have a separate rusteduk test directory, we just
	     run the accessors in test/auto instead.
	  --> 
	<include name="test/auto/*.js"/>
        <patternset refid="accessors.excludes" />
      </fileset>
    </apply>
  </target>

  <target name="vendors-jsdoc"
	  depends="-check-vendors-jsdoc"
	  description="Check out jsdoc using git to create vendors/jsdoc."
	  unless="${vendors.jsdoc.exists}">
    <echo> Clone the git repo.  We use an accessor-specific fork of https://github.com/terraswarm/jsdoc.git,
    made on 12-Jun-2015 so that we can support @accessor, @input, @output, @parameter.
    </echo>
      <mkdir dir="${basedir}/vendors"/>
      <exec dir="${basedir}/vendors"
            executable="git">
	<!-- We set LD_LIBRARY_PATH to "" and avoid
     [exec] Cloning into 'jsdoc'...
     [exec] fatal: unable to access 'https://github.com/terraswarm/jsdoc.git/': error setting certificate verify locations:
     [exec]   CAfile: /etc/ssl/certs/ca-certificates.crt
     [exec]   CApath: none
     [exec] Result: 128
	     -->
	<env key="LD_LIBRARY_PATH"
	     value=""/>
        <arg value="clone"/>
        <arg value="https://github.com/terraswarm/jsdoc.git"/>
      </exec>
  </target>

    <target name="vendors-jsdoc-pull"
	  depends="vendors-jsdoc"
	  description="Do a git pull in vendors/jsdoc">
      <exec dir="${basedir}/vendors/jsdoc"
            executable="git">
        <arg value="pull"/>
      </exec>
  </target>
</project>
