<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="KeyValueStoreClient" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="10.0.devel">
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="synchronizeToRealTime" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[70.0, 15.0]">
        </property>
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={54, 243, 1005, 634}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[771, 524]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{375.5, 252.0}">
    </property>
    <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="This model writes a sequence of numeric values into a key-value store web service.&#10;It reads the values back at half the rate, so you should see every other value.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[130.0, -5.0]">
        </property>
    </property>
    <property name="Annotation2" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textSize" class="ptolemy.data.expr.Parameter" value="12">
        </property>
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.0,0.0,0.0,1.0}">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Every 2 seconds,&#10;trigger a write to&#10;the kay-value store.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.RelativeLocation" value="[-15.0, -85.0]">
            <property name="relativeTo" class="ptolemy.kernel.util.StringAttribute" value="DiscreteClock">
            </property>
            <property name="relativeToElementName" class="ptolemy.kernel.util.StringAttribute" value="entity">
            </property>
        </property>
    </property>
    <property name="Annotation3" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textSize" class="ptolemy.data.expr.Parameter" value="12">
        </property>
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.0,0.0,0.0,1.0}">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Every 4 seconds, trigger a read from&#10;the kay-value store. The trigger&#10;input esures that this occurs after&#10;the write that occurs at the same time.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.RelativeLocation" value="[-35.0, 60.0]">
            <property name="relativeTo" class="ptolemy.kernel.util.StringAttribute" value="DiscreteClock2">
            </property>
            <property name="relativeToElementName" class="ptolemy.kernel.util.StringAttribute" value="entity">
            </property>
        </property>
    </property>
    <property name="Annotation4" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textSize" class="ptolemy.data.expr.Parameter" value="12">
        </property>
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.0,0.0,0.0,1.0}">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="The &quot;remove&quot; input is used here as&#10;a trigger, to cause this actor fire.&#10;The value is &quot;false&quot; on that input,&#10;so this actor reads from the key-value&#10;store rather than removing a value.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.RelativeLocation" value="[40.0, 40.0]">
            <property name="relativeTo" class="ptolemy.kernel.util.StringAttribute" value="KeyValueStore2">
            </property>
            <property name="relativeToElementName" class="ptolemy.kernel.util.StringAttribute" value="entity">
            </property>
        </property>
    </property>
    <property name="Annotation5" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textSize" class="ptolemy.data.expr.Parameter" value="12">
        </property>
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.0,0.0,0.0,1.0}">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="The input at &quot;value&quot; is written to the&#10;key-value store with key &quot;test&quot;.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.RelativeLocation" value="[35.0, -80.0]">
            <property name="relativeTo" class="ptolemy.kernel.util.StringAttribute">
            </property>
            <property name="relativeToElementName" class="ptolemy.kernel.util.StringAttribute">
            </property>
        </property>
    </property>
    <property name="Annotation6" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.8,0.0,0.0,1.0}">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Before running this model, run the companion&#10;KeyValueStoreServer.xml model, which provides an&#10;implementation of the key-value store on the&#10;local host.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[385.0, 40.0]">
        </property>
        <property name="LiveLink" class="ptolemy.actor.gui.LiveLink" value="KeyValueStoreServer.xml">
            <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
                <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
                </property>
            </property>
            <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">LL</text>
      </svg>
    </configure>
            </property>
            <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{440, 160}">
            </property>
        </property>
    </property>
    <entity name="Display" class="ptolemy.actor.lib.gui.Display">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={796, 65, 499, 208}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[499, 164]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[360.0, 225.0]">
        </property>
    </entity>
    <entity name="Ramp" class="ptolemy.actor.lib.Ramp">
        <doc>Create a sequence of tokens with increasing value</doc>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[190.0, 145.0]">
        </property>
    </entity>
    <entity name="DiscreteClock" class="ptolemy.actor.lib.DiscreteClock">
        <property name="period" class="ptolemy.actor.parameters.PortParameter" value="2.0">
        </property>
        <doc>Create periodic timed events.</doc>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[55.0, 135.0]">
        </property>
    </entity>
    <entity name="DiscreteClock2" class="ptolemy.actor.lib.DiscreteClock">
        <property name="period" class="ptolemy.actor.parameters.PortParameter" value="4.0">
        </property>
        <property name="values" class="ptolemy.data.expr.Parameter" value="{false}">
        </property>
        <doc>Create periodic timed events.</doc>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[55.0, 260.0]">
        </property>
    </entity>
    <entity name="KeyValueStore" class="org.terraswarm.kernel.AccessorOne">
        <property name="script" class="ptolemy.kernel.util.StringAttribute" value="&#10;    // &#10;function fire() {&#10;    var store = get(storeLocation);&#10;    var theKey = get(key);&#10;    var toRemove = get(remove);&#10;    var theValue = get(value);&#10;    var url = store + '/get?id=' + theKey;&#10;    var produce;&#10;    try {&#10;        if (toRemove) {&#10;            if (theKey != &quot;&quot;) {&#10;                produce = readURL(url);&#10;                url = store + '/delete?id=' + theKey;&#10;                readURL(url);&#10;                if (produce != &quot;&quot;) {&#10;                    send(produce, result);&#10;                }&#10;            }&#10;        } else {&#10;            // toRemove == false. If there is a value, use it to set.&#10;            if (theValue != &quot;&quot;) {&#10;                // FIXME: Escape theValue to make a valid URL.&#10;                url = store + '/set?id=' + encodeURIComponent(theKey) + '&amp;value=' + encodeURIComponent(theValue);&#10;                readURL(url);&#10;                send(theValue, result);&#10;            } else {&#10;                var valueFromStore = decodeURIComponent(readURL(url));&#10;                send(valueFromStore, result);&#10;            }&#10;        }&#10;    } catch (exception) {&#10;        send(exception.toString(), error);&#10;    }&#10;}&#10;    // &#10;  ">
        </property>
        <property name="accessorSource" class="ptolemy.kernel.util.StringAttribute" value="http://www.terraswarm.org/accessors/KeyValueStore.xml">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&#10;    &#10;This accessor reads or writes data to a key-value store web service.&#10;A URL for the service is specified by the &lt;i&gt;storeLocation&lt;/i&gt; parameter.&#10;A Ptolemy II model that provides such a key-value store service can be found&#10;at &lt;a href=&quot;http://terraswarm.org/accessors/demo/KeyValueStore/KeyValueStoreServer.xml&quot;&gt;&#10;http://terraswarm.org/accessors/demo/KeyValueStore/KeyValueStoreServer.xml&lt;/a&gt;.&#10;A demo client that uses this accessor is provided at&#10;&lt;a href=&quot;http://terraswarm.org/accessors/demo/KeyValueStore/KeyValueStoreClient.xml&quot;&gt;&#10;http://terraswarm.org/accessors/demo/KeyValueStore/KeyValueStoreClient.xml&lt;/a&gt;.&#10;&lt;p&gt;&#10;The key and the value are both text items provided as inputs.&#10;If &lt;i&gt;remove&lt;/i&gt; is true and the &lt;i&gt;key&lt;/i&gt; is non-empty, then upon firing, this actor&#10;will remove the specified key from the store, producing on its output the previous&#10;value (if any). If &lt;i&gt;remove&lt;/i&gt; is false, then this actor will either set or&#10;retrieve a value in the key-value store, depending on whether the&#10;and the &lt;i&gt;value&lt;/i&gt; input is non-empty. If the &lt;i&gt;value&lt;/i&gt; is non-empty, then this&#10;actor sets the value. If it is empty, then this actor retrieves the value.&#10;&lt;p&gt;&#10;If an error occurs accessing the key-value store (e.g., no store is found at the specified&#10;URL, or no value is found with the specified key),&#10;then an error message is produced on the &lt;i&gt;error&lt;/i&gt; output.&#10;&lt;p&gt;&#10;This accessor assumes that the protocol implemented at that location matches&#10;the specification below for the default location:&#10;&lt;ul&gt;&#10;&lt;li&gt;To store a value with key MY_ID and value MY_VALUE, use&#10;&lt;pre&gt;&#10;   http://localhost:8077/keyvalue/set?id=MY_ID&amp;value=MY_VALUE&#10;&lt;/pre&gt;&#10;&lt;/li&gt;&#10;&lt;li&gt;To retrieve the value, use&#10;&lt;pre&gt;&#10;   http://localhost:8077/keyvalue/get?id=MY_ID&#10;&lt;/pre&gt;&#10;&lt;/li&gt;&#10;&lt;li&gt;To remove a value, use&#10;&lt;pre&gt;&#10;   http://localhost:8077/keyvalue/delete?id=MY_ID&#10;&lt;/pre&gt;&#10;&lt;/li&gt;&#10;&lt;p&gt;&#10;&lt;/ul&gt;&#10;The key and value are both&#10;encoded using the JavaScript encodeURIComponent() function,&#10;and on retrieval, decoded using decodeURIComponent(),&#10;and hence can include any text characters.&#10;    &#10;  ">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Edward A. Lee">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="0.1">
            </property>
            <property name="storeLocation (port-parameter)" class="ptolemy.kernel.util.StringAttribute">
            </property>
            <property name="key (port-parameter)" class="ptolemy.kernel.util.StringAttribute" value="Key to be updated or retrieved.">
            </property>
            <property name="remove (port-parameter)" class="ptolemy.kernel.util.StringAttribute" value="If true, then remove the key from the store; otherwise, retrieve the value for the key.">
            </property>
            <property name="value (port-parameter)" class="ptolemy.kernel.util.StringAttribute" value="Value to store in the key-value store, or empty to not store anything.">
            </property>
            <property name="result (port)" class="ptolemy.kernel.util.StringAttribute" value="Value retrieved from or written to the key-value store.">
            </property>
            <property name="error (port)" class="ptolemy.kernel.util.StringAttribute" value="Error accessing the key-value store or producing the output.">
            </property>
        </property>
        <property name="storeLocation" class="ptolemy.actor.parameters.PortParameter" value="&quot;http://localhost:8077/keyvalue&quot;">
        </property>
        <property name="key" class="ptolemy.actor.parameters.PortParameter" value="&quot;test&quot;">
        </property>
        <property name="remove" class="ptolemy.actor.parameters.PortParameter" value="false">
        </property>
        <property name="value" class="ptolemy.actor.parameters.PortParameter" value="&quot;39&quot;">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[310.0, 125.0]">
        </property>
        <port name="storeLocation" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="key" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="remove" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="value" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="result" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_type" class="ptolemy.actor.TypeAttribute" value="string">
            </property>
        </port>
        <port name="error" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_type" class="ptolemy.actor.TypeAttribute" value="string">
            </property>
        </port>
    </entity>
    <entity name="KeyValueStore2" class="org.terraswarm.kernel.AccessorOne">
        <property name="script" class="ptolemy.kernel.util.StringAttribute" value="&#10;    // &#10;function fire() {&#10;    var store = get(storeLocation);&#10;    var theKey = get(key);&#10;    var toRemove = get(remove);&#10;    var theValue = get(value);&#10;    var url = store + '/get?id=' + theKey;&#10;    var produce;&#10;    try {&#10;        if (toRemove) {&#10;            if (theKey != &quot;&quot;) {&#10;                produce = readURL(url);&#10;                url = store + '/delete?id=' + theKey;&#10;                readURL(url);&#10;                if (produce != &quot;&quot;) {&#10;                    send(produce, result);&#10;                }&#10;            }&#10;        } else {&#10;            // toRemove == false. If there is a value, use it to set.&#10;            if (theValue != &quot;&quot;) {&#10;                // FIXME: Escape theValue to make a valid URL.&#10;                url = store + '/set?id=' + encodeURIComponent(theKey) + '&amp;value=' + encodeURIComponent(theValue);&#10;                readURL(url);&#10;                send(theValue, result);&#10;            } else {&#10;                var valueFromStore = decodeURIComponent(readURL(url));&#10;                send(valueFromStore, result);&#10;            }&#10;        }&#10;    } catch (exception) {&#10;        send(exception.toString(), error);&#10;    }&#10;}&#10;    // &#10;  ">
        </property>
        <property name="accessorSource" class="ptolemy.kernel.util.StringAttribute" value="http://www.terraswarm.org/accessors/KeyValueStore.xml">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&#10;    &#10;This accessor reads or writes data to a key-value store web service.&#10;A URL for the service is specified by the &lt;i&gt;storeLocation&lt;/i&gt; parameter.&#10;A Ptolemy II model that provides such a key-value store service can be found&#10;at &lt;a href=&quot;http://terraswarm.org/accessors/demo/KeyValueStore/KeyValueStoreServer.xml&quot;&gt;&#10;http://terraswarm.org/accessors/demo/KeyValueStore/KeyValueStoreServer.xml&lt;/a&gt;.&#10;A demo client that uses this accessor is provided at&#10;&lt;a href=&quot;http://terraswarm.org/accessors/demo/KeyValueStore/KeyValueStoreClient.xml&quot;&gt;&#10;http://terraswarm.org/accessors/demo/KeyValueStore/KeyValueStoreClient.xml&lt;/a&gt;.&#10;&lt;p&gt;&#10;The key and the value are both text items provided as inputs.&#10;If &lt;i&gt;remove&lt;/i&gt; is true and the &lt;i&gt;key&lt;/i&gt; is non-empty, then upon firing, this actor&#10;will remove the specified key from the store, producing on its output the previous&#10;value (if any). If &lt;i&gt;remove&lt;/i&gt; is false, then this actor will either set or&#10;retrieve a value in the key-value store, depending on whether the&#10;and the &lt;i&gt;value&lt;/i&gt; input is non-empty. If the &lt;i&gt;value&lt;/i&gt; is non-empty, then this&#10;actor sets the value. If it is empty, then this actor retrieves the value.&#10;&lt;p&gt;&#10;If an error occurs accessing the key-value store (e.g., no store is found at the specified&#10;URL, or no value is found with the specified key),&#10;then an error message is produced on the &lt;i&gt;error&lt;/i&gt; output.&#10;&lt;p&gt;&#10;This accessor assumes that the protocol implemented at that location matches&#10;the specification below for the default location:&#10;&lt;ul&gt;&#10;&lt;li&gt;To store a value with key MY_ID and value MY_VALUE, use&#10;&lt;pre&gt;&#10;   http://localhost:8077/keyvalue/set?id=MY_ID&amp;value=MY_VALUE&#10;&lt;/pre&gt;&#10;&lt;/li&gt;&#10;&lt;li&gt;To retrieve the value, use&#10;&lt;pre&gt;&#10;   http://localhost:8077/keyvalue/get?id=MY_ID&#10;&lt;/pre&gt;&#10;&lt;/li&gt;&#10;&lt;li&gt;To remove a value, use&#10;&lt;pre&gt;&#10;   http://localhost:8077/keyvalue/delete?id=MY_ID&#10;&lt;/pre&gt;&#10;&lt;/li&gt;&#10;&lt;p&gt;&#10;&lt;/ul&gt;&#10;The key and value are both&#10;encoded using the JavaScript encodeURIComponent() function,&#10;and on retrieval, decoded using decodeURIComponent(),&#10;and hence can include any text characters.&#10;    &#10;  ">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Edward A. Lee">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="0.1">
            </property>
            <property name="storeLocation (port-parameter)" class="ptolemy.kernel.util.StringAttribute">
            </property>
            <property name="key (port-parameter)" class="ptolemy.kernel.util.StringAttribute" value="Key to be updated or retrieved.">
            </property>
            <property name="remove (port-parameter)" class="ptolemy.kernel.util.StringAttribute" value="If true, then remove the key from the store; otherwise, retrieve the value for the key.">
            </property>
            <property name="value (port-parameter)" class="ptolemy.kernel.util.StringAttribute" value="Value to store in the key-value store, or empty to not store anything.">
            </property>
            <property name="result (port)" class="ptolemy.kernel.util.StringAttribute" value="Value retrieved from or written to the key-value store.">
            </property>
            <property name="error (port)" class="ptolemy.kernel.util.StringAttribute" value="Error accessing the key-value store or producing the output.">
            </property>
        </property>
        <property name="storeLocation" class="ptolemy.actor.parameters.PortParameter" value="&quot;http://localhost:8077/keyvalue&quot;">
        </property>
        <property name="key" class="ptolemy.actor.parameters.PortParameter" value="&quot;test&quot;">
        </property>
        <property name="remove" class="ptolemy.actor.parameters.PortParameter" value="false">
        </property>
        <property name="value" class="ptolemy.actor.parameters.PortParameter" value="&quot;&quot;">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[210.0, 250.0]">
        </property>
        <port name="storeLocation" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="key" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="remove" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="value" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="result" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_type" class="ptolemy.actor.TypeAttribute" value="string">
            </property>
        </port>
        <port name="error" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_type" class="ptolemy.actor.TypeAttribute" value="string">
            </property>
        </port>
    </entity>
    <entity name="Errors" class="ptolemy.actor.lib.gui.Display">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={796, 284, 499, 208}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[499, 164]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[550.0, 260.0]">
        </property>
    </entity>
    <entity name="Merge" class="ptolemy.domains.continuous.lib.ContinuousMerge">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[470.0, 260.0]">
        </property>
    </entity>
    <relation name="relation3" class="ptolemy.actor.TypedIORelation">
        <property name="_layoutHint" class="ptolemy.vergil.basic.layout.kieler.LayoutHint" value="{ { head={id=&quot;Ramp.trigger&quot;,x=190.0,y=145.0}, tail={id=&quot;DiscreteClock.output&quot;,x=55.0,y=135.0}, points={} } }">
        </property>
    </relation>
    <relation name="relation4" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation6" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation2" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation5" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation7" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation8" class="ptolemy.actor.TypedIORelation">
    </relation>
    <link port="Display.input" relation="relation2"/>
    <link port="Ramp.output" relation="relation4"/>
    <link port="Ramp.trigger" relation="relation3"/>
    <link port="DiscreteClock.output" relation="relation3"/>
    <link port="DiscreteClock2.output" relation="relation"/>
    <link port="DiscreteClock2.trigger" relation="relation6"/>
    <link port="KeyValueStore.value" relation="relation4"/>
    <link port="KeyValueStore.result" relation="relation6"/>
    <link port="KeyValueStore.error" relation="relation5"/>
    <link port="KeyValueStore2.remove" relation="relation"/>
    <link port="KeyValueStore2.result" relation="relation2"/>
    <link port="KeyValueStore2.error" relation="relation7"/>
    <link port="Errors.input" relation="relation8"/>
    <link port="Merge.input" relation="relation5"/>
    <link port="Merge.input" relation="relation7"/>
    <link port="Merge.output" relation="relation8"/>
</entity>
