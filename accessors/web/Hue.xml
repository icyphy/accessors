<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="renderHTML.xsl"?>
<!DOCTYPE class PUBLIC "-//TerraSwarm//DTD Accessor 1//EN"
    "http://terraswarm.org/accessors/Accessor_1.dtd">
<class name="Hue" extends="org.terraswarm.JSAccessor">
  <version>0.2</version>
  <author>Edward A. Lee</author>
  <input
    name="bridgeIPAddress"
    value=""
    type="string"
    description="The bridge IP address (and port, if needed)."/>
  <input
    name="userName"
    type="string"
    value="ptolemyuser"
    description="The user name for logging on to the Hue Bridge."/>
  <input
    name="lightID"
    type="number"
    value="1"
    description="The light identifier (an integer beginning with 1)."/>
  <input
    name="brightness"
    type="number"
    value="255"
    description="The brightness (an integer between 0 and 255)."/>
  <input
    name="hue"
    type="number"
    value="65280"
    description="The hue (an integer between 0 and 65280)."/>
  <input
    name="saturation"
    type="number"
    value="255"
    description="The saturation (an integer between 0 and 255)."/>
  <input
    name="on"
    type="boolean"
    value="false"
    description="Whether the light is on (true) or off (false)."/>
  <input
    name="transitionTime"
    type="number"
    value="4"
    description="The transition time, in multiples of 100ms (an integer between 0 and 65535)."/>
  <documentation type="text/html">
    <![CDATA[
    This accessor controls a Philips Hue lightbulb.
    <p>
    When this accessor fires, it sets the parameters of the specified
    light according to the input values.
    </p><p>
    Logging on: This script attempts to access the bridge as a user with
    name given by <i>userName</i>, which defaults to "ptolemyuser".
    If there is no such user on the bridge, the script registers such a user and requests
    (via an alert dialog) that the
    link button on the bridge be pushed to authorize registration of this user.
    </p><p>
    Verifying the light: The final initialization step is to verify
    that the specified light is accessible. If it is not, this accessor throws
    an error, where the error message provides a list of available lights.
    </p><p>
    Discovery: Finding the IP address of the Hue Bridge is not necessarily easy.
    The bridge acquires its address via DHCP, so the address will typically change
    each time the bridge is rebooted. Moreover, the address will likely not be
    accessible except on the local network.  The bridge responds to UPnP packets
    (universal plug-and-play), so it is possible to use software such as
    <a href="http://4thline.org/projects/cling/">Cling</a> to discover the bridge.
    Ideally, UPnP discover would be provided via an accessor. In this case, a
    swarmlet could be created that runs periodically on a local network and publishes
    the URL of any discovered bridges to a key-value store. Then the KeyValueStore
    accessor could be used to provide the <i>bridgeIPAdress</i> input to this accessor.
    </p>
   ]]>
  </documentation>
  <script type="text/javascript">
    // <![CDATA[

// State variables.
var timeout = 3000;
var bridge;
var url;

// Uncormment the following to see the URL being used for the bridge.
// alert("Connecting to: " + bridge);

function initialize() {
   ipAddress = get(bridgeIPAddress);
   if (ipAddress == null || ipAddress.trim() == "") {
      error("No IP Address is given for the Hue Bridge.");
   }
   url = "http://" + ipAddress + "/";

   // First make sure the bridge is actually there and responding.
   try {
      httpRequest(url, "GET", null, "", timeout);
   } catch ( ex) {
      // FIXME: We should do a UPnP discovery here and find a bridge.
      error("No Hue bridge responding at " + url + "\n" + ex);
   }
   // Next, make sure that "ptolemyuser" is an authorized user.
   url = url + "api/ptolemyuser/";
   var lights = JSON.parse(httpRequest(url, "GET", null, "", timeout));
   if (lights instanceof Array && lights.length > 0 && lights[0].error) {
      var description = lights[0].error.description;
      if (description.match("unauthorized user")) {
         // ptolemyuser is not an authorized user.  Add this user.
         httpRequest(bridge + "api", "POST", null, '{"devicetype":"ptolemyuser", "username":"ptolemyuser"}', timeout);
         alert("Push the link button on the Hue bridge to establish a connection.");
         httpRequest(bridge + "api", "POST", null, '{"devicetype":"ptolemyuser", "username":"ptolemyuser"}', timeout);
         // Check to see whether it succeeded.
         lights = JSON.parse(httpRequest(url, "GET", null, "", timeout));
         if (lights instanceof Array && lights.length > 0 && lights[0].error) {
             var description = lights[0].error.description;
             if (description.match("unauthorized user")) {
                error("Failed to create user.");
             }
         }
      }
   }
   // Next, make sure the specified light is reachable.
   var reachable;
   try {
      reachable = lights.lights[get(lightID)].state.reachable;
   } catch (e) {
      error("Failed to access the state of light "
         + get(lightID) + " at URL " + url + "\n" + e);
   }

   if (! reachable) {
      // Light is not reachable.
      // Find the lights that are reachable.
      var other = "";
      try {
         for (id in lights.lights) {
            if (! lights.lights[id].state.reachable) {
               continue;
            }
            if (other == "") {
               other = " Lights that are reachable are: " + id;
            } else {
               other = other + ", " + id;
            }
         }
         if (other == "") {
            other = ". No lights are reachable.";
         } else {
            other = other + ".";
         }
      } catch (e) {
         // Ignore and don't give further info about reachable lights.
      }
      error("Light " + get(lightID) + " is not reachable at " + url + other);
   }
   url = url + "lights/" + get(lightID) + "/state";
}

function fire() {
   var command = '{"on":false,';
   if (get(on) === "true") {
      command = '{"on":true,';
   }
   command = command 
         + '"bri":' + limit(get(brightness), 0, 255) + ','
         + '"hue":' + limit(get(hue), 0, 65280) + ','
         + '"sat":' + limit(get(saturation), 0, 255) + ','
         + '"transitiontime":' + limit(get(transitionTime), 0, 65535)
         + '}';
   try {
      var response = httpRequest(url, "PUT", null, command, timeout);
      if (response instanceof Array && response.length > 0 && response[0].error) {
         error("Server responds with error: " + response[0].error.description);
      }
   } catch(e) {
      error("Error accessing network: " + e);
   }
}

// Turn the light off on wrapup.
function wrapup() {
   var command = '{"on":false}';
   var response = httpRequest(url, "PUT", null, command, timeout);
   if (response instanceof Array && response.length > 0 && response[0].error) {
       alert(response[0].error.description);
   }
}

// Utility function to limit the range of a number
// and to force it to be an integer. If the value argument
// is a string, then it will be converted to a Number.
function limit(value, low, high) {
   var parsed = parseInt(value);
   if (!parsed) {
      error("Expected a number between " + low + " and " + high + ", but got " + value);
   }
   if (parsed < low) {
      return low;
   } else if (parsed > high) {
      return high;
   } else {
      return parsed;
   }
}
     // ]]>
  </script>
</class>
