<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="renderHTML.xsl"?>
<!DOCTYPE entity PUBLIC "-//TerraSwarm//DTD Accessor 1//EN"
    "http://terraswarm.org/accessors/Accessor_1.dtd">
<class name="Hue" extends="org.terraswarm.kernel.JavaScript">
  <version>0.1</version>
  <author>Edward A. Lee</author>
  <input
    name="bridgeID"
    value="1"
    type="number"
    description="The bridge identifier (an integer beginning with 1)."/>
  <input
    name="lightID"
    type="number"
    value="1"
    description="The light identifier (an integer beginning with 1)."/>
  <input
    name="brightness"
    type="number"
    value="255"
    description="The brightness (an integer between 0 and 255)."/>
  <input
    name="hue"
    type="number"
    value="65280"
    description="The hue (an integer between 0 and 65280)."/>
  <input
    name="saturation"
    type="number"
    value="255"
    description="The saturation (an integer between 0 and 255)."/>
  <input
    name="on"
    type="boolean"
    value="false"
    description="Whether the light is on (true) or off (false)."/>
  <input
    name="transitiontime"
    type="number"
    value="4"
    description="The transition time, in multiples of 100ms (an integer between 0 and 65535)."/>
  <documentation type="text/html">
    <![CDATA[
    This accessor controls a Philips Hue lightbulb.
    <p>
    Upon initialization, it retrieves the URL of the bridge
    from a key-value store service (the location of which is currently hardwired into
    the script). It then attempts to access the bridge as a user "ptolemyuser".
    If there is no such user, it registers such a user and requests that the
    link button on the bridge be pushed to authorize registration of this user.
    It then verifies that the specified light is accessible, and if not, provides
    a list of available lights.
    <p>
    When this accessor fires, it sets the parameters of the specified
    light according to the input values.
	]]>
  </documentation>
  <script type="text/javascript">
    // <![CDATA[

// State variables.
var timeout = 3000;
var bridge;
var url;

// Uncormment the following to see the URL being used for the bridge.
// alert("Connecting to: " + bridge);

function initialize() {
   // Find the IP address for the bridge.
   // This accessor assumes that the IP addres of the Hue Bridge is stored on the
   // ptango keyvalue service, indexed by HueBridgeX, where X is the bridgeID of this accessor.
   bridge = readURL("http://ptango.eecs.berkeley.edu:8077/keyvalue/get?id=HueBridge"
      + get(bridgeID)).trim();
   if (! bridge.match("/$")) {
      bridge = bridge + "/";
   }
   // Build up the URL we want one piece at a time, to make sure each piece works.
   url = bridge;

   // First make sure the bridge is actually there and responding.
   try {
      httpRequest(url, "GET", null, "", timeout);
   } catch ( ex) {
      // FIXME: We should do a UPnP discovery here and find a bridge.
      alert("No Hue bridge responding at " + url + "\n" + ex);
   }
   // Next, make sure that "ptolemyuser" is an authorized user.
   url = url + "api/ptolemyuser/";
   var lights = JSON.parse(httpRequest(url, "GET", null, "", timeout));
   if (lights instanceof Array && lights.length > 0 && lights[0].error) {
      var description = lights[0].error.description;
      if (description.match("unauthorized user")) {
         // ptolemyuser is not an authorized user.  Add this user.
         httpRequest(bridge + "api", "POST", null, '{"devicetype":"ptolemyuser", "username":"ptolemyuser"}', timeout);
         alert("Push the link button on the Hue bridge to establish a connection.");
         httpRequest(bridge + "api", "POST", null, '{"devicetype":"ptolemyuser", "username":"ptolemyuser"}', timeout);
         // Check to see whether it succeeded.
         lights = JSON.parse(httpRequest(url, "GET", null, "", timeout));
         if (lights instanceof Array && lights.length > 0 && lights[0].error) {
             var description = lights[0].error.description;
             if (description.match("unauthorized user")) {
                error("Failed to create user.");
             }
         }
      }
   }
   // Next, make sure the specified light is reachable.
   var reachable;
   try {
      reachable = lights.lights[get(lightID)].state.reachable;
   } catch (e) {
      error("Failed to access the state of light "
         + get(lightID) + " at URL " + url + "\n" + e);
   }

   if (! reachable) {
      // Light is not reachable.
      // Find the lights that are reachable.
      var other = "";
      try {
         for (id in lights.lights) {
            if (! lights.lights[id].state.reachable) {
               continue;
            }
            if (other == "") {
               other = " Lights that are reachable are: " + id;
            } else {
               other = other + ", " + id;
            }
         }
         other = other + ".";
      } catch (e) {
         // Ignore and don't give further info about reachable lights.
      }
      error("Light " + get(lightID) + " is not reachable at " + url + other);
   }
   url = url + "lights/" + get(lightID) + "/state";
}

function fire() {
   var command = '{"on":false,';
   if (get(on)) {
      command = '{"on":true,';
   }
   command = command 
         + '"bri":' + limit(get(brightness), 0, 255) + ','
         + '"hue":' + limit(get(hue), 0, 65280) + ','
         + '"sat":' + limit(get(saturation), 0, 255) + ','
         + '"transitiontime":' + limit(get(transitiontime), 0, 65535)
         + '}';
   var response = httpRequest(url, "PUT", null, command, timeout);
   if (response instanceof Array && response.length > 0 && response[0].error) {
       alert(response[0].error.description);
   }
}

// Turn the light off on wrapup.
function wrapup() {
   var command = '{"on":false}';
   var response = httpRequest(url, "PUT", null, command, timeout);
   if (response instanceof Array && response.length > 0 && response[0].error) {
       alert(response[0].error.description);
   }
}

// Utility function to limit the range of a number
// and to force it to be an integer.
function limit(value, low, high) {
   if (value < low) {
      return low;
   } else if (value > high) {
      return high;
   } else {
      return value.toFixed(0);
   }
}
  	// ]]>
  </script>
</class>
