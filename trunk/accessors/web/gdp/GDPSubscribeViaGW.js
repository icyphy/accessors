// Subscribe to a log for a given duration starting from a specified starting point. 

// Copyright (c) 2017 The Regents of the University of California.
// All rights reserved.
//
// Permission is hereby granted, without written agreement and without
// license or royalty fees, to use, copy, modify, and distribute this
// software and its documentation for any purpose, provided that the above
// copyright notice and the following two paragraphs appear in all copies
// of this software.
//
// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
// SUCH DAMAGE.
//
// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
// PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
// ENHANCEMENTS, OR MODIFICATIONS.
//

/** Subscribe to a log for a given duration starting from a specified
 *  starting point. 
 *
 *  @accessor gdp/GDPSubdViaGW
 *
 *  @author Nitesh Mor (mor@eecs.berkeley.edu)
 *
 *  @parameter {string} gateway The full gateway address that should be 
 *   used. An example is 'ws://gdp-rest-01.eecs.berkeley.edu:9007'
 *
 *  @input {} trigger A trigger
 *  @input {string} logname The name of the log that we should subscribe to
 *  @input {int} startrec The first record to read from. e.g. -5 means the
 *   fifth most recent record. (see GDP C API documentation)
 *  @input {int} numrec The number of records to be returned. (see GDP C
 *   API documentation).
 *
 *  @output {boolean} connected Whether we are connected to the gateway
 *  @output {string} _logname The name of the log the newly delivered data
 *   arrived on.
 *  @output {int} recno The record number for the data delivered.
 *  @output {string} data The actual data
 *  @output {int} ts The commit timestamp of the data, as reported by
 *   logserver.
 *
 *  @version $$Id$$
 */

// Stop extra messages from jslint and jshint.  Note that there should
// be no space between the / and the * and global. See
// https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */
/*globals exports */
/*jshint globalstrict: true*/
'use strict';

exports.setup = function() {
    //  This composite accessor was created by Cape Code.
    //  To run the code, run: 
    //  (cd $PTII/org/terraswarm/accessor/accessors/web/cg; node ../hosts/node/nodeHostInvoke.js cg/GDPSubscribeViaGW)
    //  To regenerate this composite accessor, run:
    //  $PTII/bin/ptinvoke ptolemy.cg.kernel.generic.accessor.AccessorCodeGenerator -language accessor $PTII/ptolemy/actor/lib/jjs/modules/gdp/composite/GDPSubscribeViaGW.xml
    //  to edit the model, run:
    //  $PTII/bin/capecode $PTII/ptolemy/actor/lib/jjs/modules/gdp/composite/GDPSubscribeViaGW.xml

    // Ports: GDPSubscribeViaGW: ptolemy/cg/adapter/generic/accessor/adapters/ptolemy/actor/TypedCompositeActor.java
    this.input('gateway'); // Type was unknown.
    this.input('trigger'); // Type was unknown.
    this.input('logname'); // Type was unknown.
    this.input('numrec'); // Type was unknown.
    this.input('startrec'); // Type was unknown.
    this.output('connected', {'type':'boolean'});
    this.output('_logname', {'type':'string'});
    this.output('recno', {'type':'int'});
    this.output('data', {'type':'string'});
    this.output('ts', {'type':'int'});

    // Start: WebSocketClient: ptolemy/cg/adapter/generic/accessor/adapters/org/terraswarm/accessor/JSAccessor.java
    // The script has local modifications, so it is being emitted.

    // Start: WebSocketClient: ptolemy/cg/adapter/generic/accessor/adapters/ptolemy/actor/lib/jjs/JavaScript.java
    // FIXME: See instantiate() in accessors/web/hosts/common/commonHost.js
    // We probably need to do something with the bindings.
    var WebSocketClient = this.instantiateFromCode('WebSocketClient', '// Copyright (c) 2016-2017 The Regents of the University of California.\n// All rights reserved.\n//\n// Permission is hereby granted, without written agreement and without\n// license or royalty fees, to use, copy, modify, and distribute this\n// software and its documentation for any purpose, provided that the above\n// copyright notice and the following two paragraphs appear in all copies\n// of this software.\n//\n// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY\n// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES\n// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF\n// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF\n// SUCH DAMAGE.\n//\n// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,\n// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE\n// PROVIDED HEREUNDER IS ON AN \"AS IS\" BASIS, AND THE UNIVERSITY OF\n// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,\n// ENHANCEMENTS, OR MODIFICATIONS.\n//\n\n/** This accessor sends and/or receives messages from a web socket at\n *  the specified host and port.\n *  <a href=\"https://en.wikipedia.org/wiki/WebSocket\">WebSockets</a>\n *  provide full-duplex communication channels over a single TCP/IP connection.\n *  In `initialize()`, it  begins connecting to the web socket server.\n *  Once the connection is established, a `true` boolean is sent to\n *  the `connected` output.\n *  If connection is not established immediately, the accessor will attempt to\n *  reconnect _numberOfRetries_ times at an interval of _reconnectInterval_.\n *\n *  Whenever an input is received on the `toSend`\n *  input, the message is sent to the socket. If the socket is not yet open,\n *  this accessor will, by default, queue the message to send when the socket opens,\n *  unless the `discardMessagesBeforeOpen` parameter is true, in which case,\n *  input messages that are received before the socket is opened will be\n *  discarded. If messages are queued and `throttleFactor` is non-zero, then\n *  whenever a message is queued to be later sent, the accessor\'s input handler will stall\n *  by a number of milliseconds given by the queue size times the throttleFactor.\n *  The longer the queue, the longer the stall. Note that this will likely block\n *  the host from executing, so this feature should be used with caution.\n *\n *  Whenever a message is received from the socket, that message is\n *  produced on the `\'received\'` output. Note that the message may actually be sent\n *  over multiple \'frames\', but the frames will be aggregated and produced as one\n *  message.\n *\n *  When `wrapup()` is invoked, this accessor closes the\n *  connection.\n *\n *  If the connection is dropped midway, the swarmlet may monitor the \'connected\'\n *  output for a value \'false\' and attempt a reconnection by providing either a\n *  port or server input.\n *\n *  The default type for both sending and receiving\n *  is \'application/json\', which allows sending and receiving anything that has\n *  a string representation in JSON. The types supported by this implementation\n *  include at least:\n *  * __application/json__: The this.send() function uses JSON.stringify() and sends the\n *    result with a UTF-8 encoding. An incoming byte stream will be parsed as JSON,\n *    and if the parsing fails, will be provided as a string interpretation of the byte\n *    stream.\n *  * __text/\*__: Any text type is sent as a string encoded in UTF-8.\n *  * __image/x__: Where __x__ is one of __json__, __png__, __gif__,\n *    and more.\n *    In this case, the data passed to this.send() is assumed to be an image, as encoded\n *    on the host, and the image will be encoded as a byte stream in the specified\n *    format before sending.  A received byte stream will be decoded as an image,\n *    if possible.\n *\n *  When a model with an instance of this accessor stops executing, there\n *  are two mechanisms by which data in transit can be lost. In both cases, warning\n *  messages or error messages will be issued to the host to be displayed or otherwise\n *  handled as the host sees fit.\n *\n *  * First, there might be queued messages that were received on `toSend` but have not yet\n *    been sent, either because the socket has not yet been opened or because\n *    it was closed from the other side.\n *  * Second, a message might be received from the server after shutdown has commenced.\n *    In particular, received messages are handled asynchronously by a handler function\n *    that can be invoked at any time, and that handler might be invoked after it is no\n *    longer possible for this accessor to produce outputs (it has entered its wrapup\n *    phase of execution).\n *\n *  The server might similarly lose messages by the same two mechanisms occurring\n *  on the server side. In that case, messages will presumably be displayed on the\n *  server side.\n *\n *  Accessors that extend this one can override the `toSendInputHandler` function\n *  to customize what is sent. See `RosPublisher.js` for an example.\n *\n *  This accessor requires the \'webSocket\' module.\n *\n *  @accessor net/WebSocketClient\n *  @input {string} server The IP address or domain name of server. Defaults to \'localhost\'.\n *  @input {int} port The port on the server to connect to. Defaults to -1, which means\n *   wait for a non-negative input before connecting.\n *  @input toSend The data to be sent over the socket.\n *  @output {boolean} connected Output `true` on connected and `false` on disconnected.\n *  @output received The data received from the web socket server.\n *\n *  @parameter {string} receiveType The MIME type for incoming messages,\n *   which defaults to \'application/json\'.\n *  @parameter {string} sendType The MIME type for outgoing messages,\n *   which defaults to \'application/json\'.\n *  @parameter {int} connectTimeout The time in milliseconds to wait\n *   before giving up on a connection (default is 1000).\n *  @parameter {int} numberOfRetries The number of times to retry if\n *   a connection fails. Defaults to 5.\n *  @parameter {int} timeBetweenRetries The time between retries in milliseconds.\n *   Defaults to 500.\n *  @parameter {boolean} trustAll Whether to trust any server certificate.\n *   This defaults to false. Setting it to true means that if sslTls is set to true,\n *   then any certificate provided by the server will be trusted.\n *  @parameter {string} trustedCACertPath If sslTls is set to true and trustAll is set to false,\n *   then this option needs to specify the fully qualified filename for the file that stores\n *   the certificate of a certificate authority (CA) that this client will use to verify server\n *   certificates. This path can be any of those understood by the Ptolemy host, e.g. paths\n *   beginning with $CLASSPATH/.\n *   FIXME: Need to be a list of paths for certificates rather than a single path.\n *  @parameter {boolean} sslTls Whether SSL/TLS is enabled. This defaults to false.\n *  @parameter {boolean} discardMessagesBeforeOpen If true,\n *   then any messages received on `toSend` before the socket\n *   is open will be discarded. This defaults to false.\n *  @parameter {int} throttleFactor If non-zero, specifies a\n *   time (in milliseconds) to stall when a message is queued\n *   because the socket is not yet open. The time of the stall\n *   will be the queue size (after adding the message) times\n *   the throttleFactor. This defaults to 100. Making it non-zero\n *   causes the input handler to take time if there are pending unsent messages.\n\n *  @author Hokeun Kim, Marcus Pan, Edward A. Lee, Matt Weber\n *  @version $$Id: WebSocketClient.js 1597 2017-04-29 15:41:50Z cxh $$\n */\n\n// Stop extra messages from jslint and jshint.  Note that there should\n// be no space between the / and the * and global. See\n// https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */\n/*global console, error, exports, require */\n/*jshint globalstrict: true*/\n\'use strict\';\n/*jslint plusplus: true */\n\nvar WebSocket = require(\'@accessors-modules/web-socket-client\');\nvar client = null;\nvar pendingSends = [];\nvar previousServer, previousPort;\nvar running = false;\n\nvar debug = false;\n\n/** Set up the accessor by defining the parameters, inputs, and outputs. */\nexports.setup = function () {\n    this.input(\'server\', {\n        type: \'string\',\n        value: \'localhost\'\n    });\n    this.input(\'port\', {\n        type: \'int\',\n        value: -1\n    });\n    this.input(\'toSend\');\n    this.output(\'connected\', {\n        type: \'boolean\'\n    });\n    this.output(\'received\');\n\n    this.parameter(\'receiveType\', {\n        type: \'string\',\n        value: \'application/json\'\n    });\n    this.parameter(\'sendType\', {\n        type: \'string\',\n        value: \'application/json\'\n    });\n    this.parameter(\'connectTimeout\', {\n        value: 1000,\n        type: \"int\"\n    });\n    this.parameter(\'numberOfRetries\', {\n        type: \'int\',\n        value: 5\n    });\n    this.parameter(\'timeBetweenRetries\', {\n        type: \'int\',\n        value: 500\n    });\n    this.parameter(\'trustAll\', {\n        type: \'boolean\',\n        value: false\n    });\n    this.parameter(\'trustedCACertPath\', {\n        type: \'string\',\n        value: \'\'\n    });\n    this.parameter(\'sslTls\', {\n        type: \'boolean\',\n        value: false\n    });\n    this.parameter(\'discardMessagesBeforeOpen\', {\n        type: \'boolean\',\n        value: false\n    });\n    this.parameter(\'throttleFactor\', {\n        type: \'int\',\n        value: 100\n    });\n\n    // Attempt to add a list of options for types, but do not error out\n    // if the socket module is not supported by the host.\n    try {\n        this.parameter(\'receiveType\', {\n            options: WebSocket.supportedReceiveTypes()\n        });\n        this.parameter(\'sendType\', {\n            options: WebSocket.supportedSendTypes()\n        });\n    } catch (err) {\n        this.error(err);\n    }\n};\n\n/** Set up input handlers, and if the current value of the \'port\' input is\n *  non-negative, initiate a connection to the server using the\n *  current parameter values, and\n *  set up handlers for for establishment of the connection, incoming data,\n *  errors, and closing from the server.\n */\nexports.initialize = function () {\n    if (debug) {\n        console.log(this.accessorName + \': WebSockClient.js: initialize()\');\n    }\n    this.addInputHandler(\'server\', this.exports.connect.bind(this));\n    this.addInputHandler(\'port\', this.exports.connect.bind(this));\n    this.addInputHandler(\'toSend\', exports.toSendInputHandler.bind(this));\n    running = true;\n    this.exports.connect.call(this);\n};\n\n/** Initiate a connection to the server using the current parameter values,\n *  set up handlers for for establishment of the connection, incoming data,\n *  errors, and closing from the server, and set up a handler for inputs\n *  on the toSend() input port.\n */\nexports.connect = function () {\n    if (debug) {\n        console.log(this.accessorName + \': WebSockClient.js: connect()\');\n    }\n    // Note that if \'server\' and \'port\' both receive new data in the same\n    // reaction, then this will be invoked twice. But we only want to open\n    // the socket once.  This is fairly tricky.\n\n    var portValue = this.get(\'port\'),\n        serverValue = null;\n    if (portValue < 0) {\n        // No port is specified. This could be a signal to close a previously\n        // open socket.\n        if (client) {\n            client.close();\n        }\n        previousPort = null;\n        previousServer = null;\n        //\n        console.log(this.accessorName + \': WebSocketClient.js: connect(): portValue: \' + portValue +\n            \', which is less than 0. This could be a signal to close a previously open socket.\' +\n            \'  Returning.\');\n        return;\n    }\n\n    serverValue = this.get(\'server\');\n    if (previousServer === serverValue && previousPort === portValue) {\n        // A request to open a client for this server/port pair has already\n        // been made and has not yet been closed or failed with an error.\n        return;\n    }\n    // Record the host/port pair that we are now opening.\n    previousServer = serverValue;\n    previousPort = portValue;\n\n    if (client) {\n        // Either the host or the port has changed. Close the previous socket.\n        client.close();\n    }\n\n    if (debug) {\n        console.log(this.accessorName + \': WebSockClient.js: connect() calling new WebSocket.Client()\');\n    }\n    client = new WebSocket.Client({\n        \'host\': this.get(\'server\'),\n        \'port\': this.get(\'port\'),\n        \'receiveType\': this.getParameter(\'receiveType\'),\n        \'sendType\': this.getParameter(\'sendType\'),\n        \'connectTimeout\': this.getParameter(\'connectTimeout\'),\n        \'numberOfRetries\': this.getParameter(\'numberOfRetries\'),\n        \'timeBetweenRetries\': this.getParameter(\'timeBetweenRetries\'),\n        \'trustAll\': this.getParameter(\'trustAll\'),\n        \'trustedCACertPath\': this.getParameter(\'trustedCACertPath\'),\n        \'sslTls\': this.getParameter(\'sslTls\'),\n        \'discardMessagesBeforeOpen\': this.getParameter(\'discardMessagesBeforeOpen\'),\n        \'throttleFactor\': this.getParameter(\'throttleFactor\')\n    });\n\n    // Using \'this.exports\' rather than just \'exports\' below allows these\n    // functions to be overridden in derived accessors.\n    client.on(\'open\', this.exports.onOpen.bind(this));\n    client.on(\'message\', this.exports.onMessage.bind(this));\n    client.on(\'close\', this.exports.onClose.bind(this));\n\n    client.on(\'error\', function (message) {\n        previousServer = null;\n        previousPort = null;\n        console.log(this.accessorName + \': WebSocketClient.js: Error: \' + message);\n    });\n\n    client.open();\n    if (debug) {\n        console.log(this.accessorName + \': WebSockClient.js: connect() done\');\n    }\n};\n\n/** Handles input on \'toSend\'. */\nexports.toSendInputHandler = function () {\n        console.log(\'WebSocketClient send input received.\');\n    this.exports.sendToWebSocket.call(this, this.get(\'toSend\'));\n};\n\n/** Sends JSON data to the web socket. */\nexports.sendToWebSocket = function (data) {\n    // May be receiving inputs before client has been set.\n    if (client) {\n        client.send(data);\n    } else {\n        if (!this.getParameter(\'discardMessagesBeforeOpen\')) {\n            pendingSends.push(data);\n        } else {\n            console.log(this.accessorName + \'WebSocketClient.js: Discarding data because socket is not open.\');\n        }\n    }\n};\n\n/** Executes once  web socket establishes a connection.\n *  Sets \'connected\' output to true.\n */\nexports.onOpen = function () {\n    var i;\n    if (debug) {\n        console.log(this.accessorName + \': WebSocketClient.js: onOpen(): Status: Connection established\');\n    }\n    this.send(\'connected\', true);\n\n    // If there are pending sends, send them now.\n    // Note this implementation requires that the host invoke\n    // this callback function atomically w.r.t. the input handler\n    // that adds messages to the pendingSends queue.\n    for (i = 0; i < pendingSends.length; i += 1) {\n        client.send(pendingSends[i]);\n    }\n    pendingSends = [];\n};\n\n/** Send false to \'connected\' output.\n *  This will be called if either side closes the connection.\n */\nexports.onClose = function () {\n    previousServer = null;\n    previousPort = null;\n\n    if (debug) {\n        console.log(this.accessorName + \': WebSocketClient.js onClose(): Status: Connection closed.\');\n    }\n\n    // NOTE: Even if running is true, it can occur that it is too late\n    // to send the message (the wrapup process has been started), in which case\n    // the message may not be received.\n    if (running) {\n        this.send(\'connected\', false);\n    }\n};\n\n/** Send the message received from web socket to the \'received\' output. */\nexports.onMessage = function (message) {\n    this.send(\'received\', message);\n};\n\n/** Close the web socket connection. */\nexports.wrapup = function () {\n    running = false;\n    if (client) {\n        client.close();\n        if (debug) {\n            console.log(this.accessorName + \'WebSocketClient.js: Status: Connection closed in wrapup.\');\n        }\n    }\n};\n');
    WebSocketClient.setDefault('server', "gdp-rest-01.eecs.berkeley.edu");
    WebSocketClient.setParameter('receiveType', "text/plain");
    WebSocketClient.setParameter('sendType', "text/plain");
    WebSocketClient.setParameter('trustedCACertPath', "");
    WebSocketClient.setDefault('port', 9007);
    WebSocketClient.setParameter('connectTimeout', 1000);
    WebSocketClient.setParameter('numberOfRetries', 5);
    WebSocketClient.setParameter('timeBetweenRetries', 500);
    WebSocketClient.setParameter('trustAll', false);
    WebSocketClient.setParameter('sslTls', false);
    WebSocketClient.setParameter('discardMessagesBeforeOpen', false);
    WebSocketClient.setParameter('throttleFactor', 100);

    // Start: InputParser: ptolemy/cg/adapter/generic/accessor/adapters/ptolemy/actor/lib/jjs/JavaScript.java
    // FIXME: See instantiate() in accessors/web/hosts/common/commonHost.js
    // We probably need to do something with the bindings.
    var InputParser = this.instantiateFromCode('InputParser', '// Put your JavaScript program here.\n// Add ports and parameters.\n// Define JavaScript functions initialize(), fire(), and/or wrapup().\n// Refer to parameters in scope using dollar-sign{parameterName}.\n// In the fire() function, use get(parameterName, channel) to read inputs.\n// Send to output ports using send(value, portName, channel).\n\nexports.setup = function() {\n        this.input(\'trigger\');\n    this.input(\'logname\', {\'type\': \'string\'}); \n    this.input(\'numrec\', {\'type\': \'int\'});\n    this.input(\'startrec\', {\'type\': \'int\'});\n    this.output(\'toSend\', {\'type\': \'string\'});\n};\n\nexports.initialize = function() {\n        var self = this;\n        this.addInputHandler(\'trigger\', function() {\n                var obj = new Object();\n        obj.logname = self.get(\'logname\');\n        obj.startrec = self.get(\'startrec\'); \n        obj.numrec = self.get(\'numrec\');\n        if (obj.logname == \'placeholder\' || obj.logname == null) {  \n                error(\'logname ought to be set\');\n        } else { \n                var jsonstr = JSON.stringify(obj);\n                console.log(\'Sending message \' + jsonstr);\n                self.send(\'toSend\', jsonstr);\n        }\n        });\n};\n');

    // Start: OutputParser: ptolemy/cg/adapter/generic/accessor/adapters/ptolemy/actor/lib/jjs/JavaScript.java
    // FIXME: See instantiate() in accessors/web/hosts/common/commonHost.js
    // We probably need to do something with the bindings.
    var OutputParser = this.instantiateFromCode('OutputParser', '// Put your JavaScript program here.\n// Add ports and parameters.\n// Define JavaScript functions initialize(), fire(), and/or wrapup().\n// Refer to parameters in scope using dollar-sign{parameterName}.\n// In the fire() function, use get(parameterName, channel) to read inputs.\n// Send to output ports using send(value, portName, channel).\n\nexports.setup = function() {\n        this.input(\'received\', {\'type\': \'string\'});\n    this.output(\'_logname\', {\'type\': \'string\'});\n    this.output(\'recno\', {\'type\': \'int\'});\n    this.output(\'data\', {\'type\': \'string\'});\n    this.output(\'ts\', {\'type\': \'int\'});\n};\n\nexports.initialize = function() {\n        var self = this;\n        this.addInputHandler(\'received\', function() {\n                try { \n                        var obj = JSON.parse(self.get(\'received\')); \n                if (obj.ep_stat[0] != 200) {\n                        error(JSON.stringify(obj.ep_stat)); \n                        }\n                this.send(\'_logname\', obj.logname); \n                if (obj.type == 1) { \n                        self.send(\'recno\', parseInt(obj.datum.recno));\n                        self.send(\'data\', obj.datum.data);\n                        self.send(\'ts\', obj.datum.ts.tv_sec);\n                } else {\n                        error(\'Error subscribing to \' + obj.logname);\n                }\n        } catch (err) { \n                        error(err.message); \n        } \n        });\n};\n\n\n');

    // Start: GatewayParser: ptolemy/cg/adapter/generic/accessor/adapters/ptolemy/actor/lib/jjs/JavaScript.java
    // FIXME: See instantiate() in accessors/web/hosts/common/commonHost.js
    // We probably need to do something with the bindings.
    var GatewayParser = this.instantiateFromCode('GatewayParser', '// Put your JavaScript program here.\n// Add ports and parameters.\n// Define JavaScript functions initialize(), fire(), and/or wrapup().\n// Refer to parameters in scope using dollar-sign{parameterName}.\n// In the fire() function, use get(parameterName, channel) to read inputs.\n// Send to output ports using send(value, portName, channel).\n\nexports.setup = function() {\n        this.input(\'gateway\', {\'type\' : \'string\'});\n        this.output(\'server\', {\'type\' : \'int\'});\n        this.output(\'port\', {\'type\' : \'int\'});\n};\n\nexports.initialize = function() {\n        var self = this;\n        this.addInputHandler(\'gateway\', function() {\n                var gateway = self.get(\'gateway\');\n                if (! gateway.startsWith(\'ws://\')) {\n         error(\'Gateway should start with ws://\');\n            };\n            var tmp = gateway.substring(5).split(\':\');\n            var server = tmp[0];\n            var port = parseInt(tmp[1]);\n            self.send(\'server\', server);\n            self.send(\'port\', port);\n        });\n};\n');

    // Connections: GDPSubscribeViaGW: ptolemy/cg/adapter/generic/accessor/adapters/ptolemy/actor/TypedCompositeActor.java
    this.connect('gateway', GatewayParser, 'gateway');
    this.connect('trigger', InputParser, 'trigger');
    this.connect('logname', InputParser, 'logname');
    this.connect('numrec', InputParser, 'numrec');
    this.connect('startrec', InputParser, 'startrec');
    this.connect(WebSocketClient, 'connected', 'connected');
    this.connect(OutputParser, '_logname', '_logname');
    this.connect(OutputParser, 'recno', 'recno');
    this.connect(OutputParser, 'data', 'data');
    this.connect(OutputParser, 'ts', 'ts');
    this.connect(GatewayParser, 'server', WebSocketClient, 'server');
    this.connect(GatewayParser, 'port', WebSocketClient, 'port');
    this.connect(InputParser, 'toSend', WebSocketClient, 'toSend');
    this.connect(WebSocketClient, 'received', OutputParser, 'received');
};

// The stopTime parameter of the directory in the model was 0, so this.stopAt() is not being generated.



