<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="renderHTML.xsl"?>
<!DOCTYPE class PUBLIC "-//TerraSwarm//DTD Accessor 1//EN"
    "http://www.terraswarm.org/accessors/Accessor_1.dtd">
<class name="VertxSubscribe" extends="org.terraswarm.JSAccessor">
  <version>0.1</version>
  <author>Patricia Derler, Edward A. Lee, Ben Zhang</author>
  <input
    name="busHost"
    value="localhost"
    type="string"
    description="The IP address or DNS name of the host for the Vert.x bus server."/>
  <input
    name="busHostPort"
    value="8080"
    type="string"
    description="The port for the host for the Vert.x bus."/>
  <input
    name="address"
    value=""
    type="string"
    description="The event bus address, or the name of the events to which to subscribe."/>
  <output
    name="message"
    type="string"
    description="The message from the bus, as a JSON-encoded string."/>
  <requires name="vertxEventBus"/>
  <documentation type="text/html">
    <![CDATA[
    This actor subscribes to a Vert.x event bus.
	]]>
  </documentation>
  <script type="text/javascript">
    // <![CDATA[

var Vertx = require('vertxEventBus');
var eb = null;
var connectTries = 0;
var maxTries = 5;
var retryDelay = 2000;  // 2 seconds
var opened = false;

function onOpen() {
  opened = true;
  eb.registerAddressListener(get(address), 
        function onReceived(msg) {
            send(msg, message);
        });
}

exports.initialize = function() {
    if (eb == null) { 
        connectTries = 1;       
        eb = new Vertx.VertxBus({host: get(busHost), port: get(busHostPort)});
        eb.on('open', onOpen);
        eb.on('error', function(kind) {
           // Upon connection error, try to connect again after 1 second, up to 3 times
           if (kind != null && kind == 'connect') {
              if (connectTries < maxTries) {
                 setTimeout(function() {
                    connectTries++;
                   eb.connect();
                 }, retryDelay);
              } else {
                 // TODO:  How should the accessor signal an error?
                 // Create a "status" output port?  Throw an exception?  Call wrapup()?
                 print("Subscriber cannot connect to the event bus.");
              }
           }
        });
    }
}

exports.wrapup = function() {
    if (opened) {
       eb.close();
    }
    eb = null;
}
	// 
   ]]>
  </script>
</class>
