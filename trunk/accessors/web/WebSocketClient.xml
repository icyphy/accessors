<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="renderHTML.xsl"?>
<!DOCTYPE class PUBLIC "-//TerraSwarm//DTD Accessor 1//EN"
    "http://www.terraswarm.org/accessors/Accessor_1.dtd">
<class name="WebSocketClient" extends="org.terraswarm.JSAccessor">
  <version>0.1</version>
  <author>Hokeun Kim</author>
  <input
    name="url"
    value="ws://localhost:8080"
    type="string"
    description="The url of the web socket server."/>
  <input
    name="data"
    value="Hello, server!"
    type="string"
    description="The data to be sent to the web socket server during the next firing."/>
  <input
    name="enable"
    value="true"
    type="boolean"
    description="When this is set true, this accessor sends the data on firing."/>
  <output
    name="message"
    type="string"
    description="The message received from the web socket server"/>
  <output
    name="error"
    type="string"
    description="The error string of the connection."/>
  <requires name="webSocket"/>   
  <description type="text/html">
    <![CDATA[
This accessor, when initialized, connects to the web socket server,
when fired, sends the data on the data port,
and when wrapped up, closes the connection.
This accessor generates output on the message port when a message is received from the server.
  ]]>
  </description>
  <script type="text/javascript">
    // <![CDATA[
  var WebSocket = require('webSocket');
  var opened = false;
  var dataQueue = [];
  var dataQueueIsLocked = false;
  function sendDataInQueue() {
    while (dataQueueIsLocked);
    dataQueueIsLocked = true;
    if (opened) {
      var queueLength = dataQueue.length;
      for (var i = 0; i < queueLength; i++) {
        ws.send(dataQueue[i]);
      }
      dataQueue = [];
    }
    dataQueueIsLocked = false;
  }
  function onOpen() {
    console.log('Status: Connection established');
    opened = true;
    sendDataInQueue();
  }
  function onClose(message) {
    if (!message) {
      message = '';
    }
    console.log('Status: Connection closed. ' + message);
    opened = false;
  }
  function onError() {
    console.log('Status: Connection error occurred.');
    opened = false;
  }
  function onMessage(received, flags) {
    if (flags.binary) {
      received = WebSocket.binToStr(received);
    }
    send(received, message);
  }
  var ws = null;
  var inputQueue = [];
  function inputHandler() {
    inputQueue.push(get(data));
  }
  function initialize() {
    inputQueue = [];
    addInputHandler(inputHandler, data);
    if (ws == null) {
      ws = new WebSocket.Socket(get(url));
      ws.on('open', onOpen);
      ws.on('message', onMessage);
      ws.on('close', onClose);
      ws.on('error', onError);
    }
  }
  function wrapup() {
    if (ws != null) {
      ws.close();
    }
    opened = false;
  }
  function fire() {
    if (get(enable)) {
      var queueLength = inputQueue.length;
      for (var i = 0; i < queueLength; i++) {
        dataQueue.push(inputQueue[i]);
      }
      inputQueue = [];
    }
    sendDataInQueue();
  }
  // ]]>
  </script>
</class>
