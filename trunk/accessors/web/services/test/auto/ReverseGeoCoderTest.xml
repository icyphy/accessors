<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="ReverseGeoCoderTest" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="stopTime" class="ptolemy.data.expr.Parameter" value="8">
        </property>
        <property name="stopWhenQueueIsEmpty" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="synchronizeToRealTime" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[105.0, 45.0]">
        </property>
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={243, 219, 934, 632}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[700, 522]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{355.0, 255.181640625}">
    </property>
    <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="This accessor requires a &quot;key&quot; for the Google Geocoding API, which you can&#10;obtain for free at https://developers.google.com/maps/documentation/geocoding/intro .&#10;&#10;This accessor looks for a key in $KEYSTORE/geoCoderKey, which&#10;resolves to $HOME/.ptKeystore/geoCoderKey &#10;&#10;GeoCoding uses the same key as ReverseGeoCoding. ">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[45.0, 105.0]">
        </property>
    </property>
    <entity name="ReverseGeoCoder" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2016-2017 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;&#10;/** Retrieve an address given a location.&#10; *  The location is given as an object with two numeric fields,&#10; *  &quot;latitude&quot; and &quot;longitude&quot;. For example,&#10; *  `{&quot;latitude&quot;: 37.85, &quot;longitude&quot;: -122.26}` is&#10; *  the location of Berkeley, California.&#10; *&#10; *  This accessor requires a &quot;key&quot; for the Google Geocoding API, which you can&#10; *  obtain for free at https://developers.google.com/maps/documentation/geocoding/intro .&#10; *&#10; *  This accessor looks for a key in $KEYSTORE/geoCoderKey, which&#10; *  resolves to $HOME/.ptKeystore/geoCoderKey (GeoCoding uses the same key as ReverseGeoCoding). &#10; *&#10; *  This accessor does not block waiting for the response, but if any additional&#10; *  *address* input is received before a pending request has received a response&#10; *  or timed out, then the new request will be queued and sent out only after&#10; *  the pending request has completed. This strategy ensures that outputs are&#10; *  produced in the same order as the input requests.&#10; *&#10; *  If multiple addresses are returned from the google reverse geocoding service,&#10; *  this accessor outputs the first one on address. The full response is available&#10; *  at the response output.&#10; *  &#10; *  The accuracy property of the location input is used to filter the returned results.&#10; *  If for example, location is given at a very low accuracy and the given coordinates are&#10; *  intended to represent an entire city or district, it would be overly specific to return&#10; *  the street address. Instead the name of the city should be the output.&#10; *&#10; *  @accessor services/ReverseGeoCoder&#10; *  @input location The location, as an object with a 'latitude' and 'longitude'&#10; *   property.&#10; *  @output {string} address The first returned address, for example &quot;Berkeley, CA&quot;.&#10; *  @output response An object containing the full address information.&#10; *  @author Matt Weber&#10; *  @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should&#10;// be no space between the / and the * and global. See&#10;// https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*globals addInputHandler, console, get, getParameter, getResource, error, exports, extend, get, input, output, parameter, require, send */&#10;/*jshint globalstrict: true*/&#10;'use strict';&#10;&#10;/** Set up the accessor by defining the inputs and outputs.&#10; */&#10;exports.setup = function () {&#10;    this.extend('net/REST');&#10;    this.input('location',{&#10;        &quot;type&quot;: 'JSON'&#10;    });&#10;    this.output('address',{&#10;        &quot;type&quot;: 'string'&#10;    });&#10;&#10;    // Change default values of the base class inputs.&#10;    // Also, hide base class inputs, except trigger.&#10;    // Note the need for quotation marks on the options parameter.&#10;    this.input('options', {&#10;        'visibility': 'expert',&#10;        'value': '{&quot;url&quot;: &quot;https://maps.googleapis.com&quot;}'&#10;    });&#10;    this.input('command', {&#10;        'visibility': 'expert',&#10;        'value': 'maps/api/geocode/json'&#10;    });&#10;&#10;    this.input('arguments', {&#10;        'visibility': 'expert'&#10;    });&#10;    this.input('body', {&#10;        'visibility': 'expert'&#10;    });&#10;    this.input('trigger', {&#10;        'visibility': 'expert'&#10;    });&#10;    this.output('headers', {&#10;        'visibility': 'expert'&#10;    });&#10;    this.output('status', {&#10;        'visibility': 'expert'&#10;    });&#10;    this.parameter('outputCompleteResponseOnly', {&#10;        'visibility': 'expert'&#10;    });&#10;};&#10;&#10;exports.initialize = function () {&#10;    // Be sure to call the superclass so that the trigger input handler gets registered.&#10;    exports.ssuper.initialize.call(this);&#10;&#10;    var self = this;&#10;&#10;    // Handle location information.&#10;    this.addInputHandler('location', function () {&#10;        var location = this.get('location');&#10;        if (location) {&#10;            // The key from https://developers.google.com/maps/documentation/geocoding/intro&#10;            var key = '';&#10;&#10;            // See the accessor comment for how to get the key.&#10;            var keyFile = '$KEYSTORE/geoCoderKey';&#10;            try {&#10;                key = getResource(keyFile, 1000).trim();&#10;            } catch (e) {&#10;                console.log('GeoCoder.js: Could not get ' + keyFile + &quot;:  &quot; + e +&#10;                            '\nThe key is not public, so this accessor is only useful ' +&#10;                            'If you have the key.  See ' +&#10;                            'https://www.icyphy.org/accessors/library/index.html?accessor=services.GeoCoder');&#10;                key = 'ThisIsNotAPipeNorIsItAWorkingKeySeeTheReverseGeoCoderAccessorDocs';&#10;            }&#10;&#10;            // console.log('GeoCoder: address: ' + address + ' key: ' + key);&#10;&#10;            // arguments is a reserved word, so we use args.&#10;            var args = {&#10;                'latlng': location.latitude + ',' + location.longitude,&#10;                'key': key&#10;            };&#10;&#10;            //Set a filter for the reverse geocoding request based on the accuracy of the&#10;            //location object. Default to no filter if accuracy is not specified or set to high.&#10;            //The list of results from google is ordered by accuracy. &#10;            if(location.accuracy &amp;&amp; location.accuracy == &quot;low&quot;){&#10;                args.result_type = &quot;locality&quot;;&#10;                //according to the google API https://developers.google.com/maps/documentation/geocoding/intro#Types&#10;                //&quot;locality indicates an incorporated city or town political entity.&quot;&#10;                //I need to do more experimenting, but it seems ip based location is accurate&#10;                //up to this level but no further. &#10;&#10;            }&#10;            self.send('arguments', args);&#10;            self.send('trigger', true);&#10;        } else {&#10;            throw 'ReverseGeoCoder: No location.';&#10;        }&#10;    });&#10;};&#10;&#10;&#10;/** Filter the response, extracting the addresses &#10; */&#10;exports.filterResponse = function (response) {&#10;    if (response) {&#10;        // Note that for some hosts, the response is a string, needing to parsed,&#10;        // and for some, its already been parsed.&#10;        var parsed = response;&#10;        if (typeof parsed === 'string') {&#10;            try {&#10;                parsed = JSON.parse(response);&#10;            } catch (err) {&#10;                error('ReverseGeoCoder: Unable to parse response: ' + err.message +&#10;                    '\nResponse was: ' + response);&#10;                // So that downstream actors don't just a previous location, send null.&#10;                this.send('address', null);&#10;            }&#10;        }&#10;        // NOTE: All of the following should be replaced with a generic&#10;        // schema transformation utility.&#10;        // FIXME: Just taking the first result if there are multiple matches.&#10;        if (parsed.results &amp;&amp;&#10;            parsed.results[0] &amp;&amp;&#10;            parsed.results[0].formatted_address)  {&#10;            this.send('address', parsed.results[0].formatted_address);&#10;        } else {&#10;            error('ReverseGeoCoder: No matching address.');&#10;            // So that downstream actors don't just a previous location, send null.&#10;            this.send('address', null);&#10;        }&#10;    }&#10;    return response;&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/services/ReverseGeoCoder.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Retrieve an address given a location.&#10; The location is given as an object with two numeric fields,&#10; &amp;quot;latitude&amp;quot; and &amp;quot;longitude&amp;quot;. For example,&#10; &lt;code&gt;{&amp;quot;latitude&amp;quot;: 37.85, &amp;quot;longitude&amp;quot;: -122.26}&lt;/code&gt; is&#10; the location of Berkeley, California.&lt;/p&gt;&#10;&lt;p&gt; This accessor requires a &amp;quot;key&amp;quot; for the Google Geocoding API, which you can&#10; obtain for free at https://developers.google.com/maps/documentation/geocoding/intro .&lt;/p&gt;&#10;&lt;p&gt; This accessor looks for a key in $KEYSTORE/geoCoderKey, which&#10; resolves to $HOME/.ptKeystore/geoCoderKey (GeoCoding uses the same key as ReverseGeoCoding). &lt;/p&gt;&#10;&lt;p&gt; This accessor does not block waiting for the response, but if any additional&#10; &lt;em&gt;address&lt;/em&gt; input is received before a pending request has received a response&#10; or timed out, then the new request will be queued and sent out only after&#10; the pending request has completed. This strategy ensures that outputs are&#10; produced in the same order as the input requests.&lt;/p&gt;&#10;&lt;p&gt; If multiple addresses are returned from the google reverse geocoding service,&#10; this accessor outputs the first one on address. The full response is available&#10; at the response output.&lt;/p&gt;&#10;&lt;p&gt; The accuracy property of the location input is used to filter the returned results.&#10; If for example, location is given at a very low accuracy and the given coordinates are&#10; intended to represent an entire city or district, it would be overly specific to return&#10; the street address. Instead the name of the city should be the output.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Matt Weber">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="location (port)" class="ptolemy.kernel.util.StringAttribute" value="The location, as an object with a 'latitude' and 'longitude'&#10;  property.">
            </property>
            <property name="address (port)" class="ptolemy.kernel.util.StringAttribute" value="The first returned address, for example &quot;Berkeley, CA&quot;.">
            </property>
            <property name="response (port)" class="ptolemy.kernel.util.StringAttribute" value="An object containing the full address information.">
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="options" class="ptolemy.actor.parameters.PortParameter" value="{&quot;url&quot;: &quot;https://maps.googleapis.com&quot;}">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="command" class="ptolemy.actor.parameters.PortParameter" value="maps/api/geocode/json">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="arguments" class="ptolemy.actor.parameters.PortParameter" value="">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{210.0, 425.0}">
        </property>
        <property name="timeout" class="ptolemy.data.expr.Parameter" value="7000">
        </property>
        <port name="options" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
        <port name="command" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="arguments" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
        <port name="trigger" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="body" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="response" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="status" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="headers" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="location" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
        <port name="address" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="LatLongGenerator" class="ptolemy.actor.lib.jjs.JavaScript">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Put your JavaScript program here.&#10;// Add ports and parameters.&#10;// Define JavaScript functions initialize(), fire(), and/or wrapup().&#10;// Refer to parameters in scope using dollar-sign{parameterName}.&#10;// In the fire() function, use get(parameterName, channel) to read inputs.&#10;// Send to output ports using send(value, portName, channel).&#10;exports.setup = function(){&#10;	this.output('location');&#10;	//this.output('address');&#10;};&#10;&#10;exports.initialize = function(){&#10;	this.send('location', &#10;		{&#10;			&quot;latitude&quot;:37.871853,&#10;			&quot;longitude&quot;:-122.258423	&#10;			}&#10;	);	&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[60.0, 425.0]">
        </property>
        <port name="location" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="TrainableTest" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2016-2017 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;/** Compare the input with a known good input.&#10; *  If you set ''trainingMode'' to true and provide inputs, then the&#10; *  inputs will be recorded in the ''correctValues'' parameters.&#10; *  Otherwise, the inputs will be compared against those in the&#10; *  ''correctValue'' parameter.&#10; *&#10; *  @accessor test/TrainableTest&#10; *  @input input The input value.&#10; *  @output output False as long as there is data to compare against the input&#10; *  @param correctValues a JSON array of the correct values.&#10; *  @param trainingMode true if the input is being trained.&#10; *  @author Christopher Brooks based on the Ptolemy NonStrictTest actor by Paul Whitaker, Christopher Hylands, Edward A. Lee&#10; *  @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should&#10;// be no space between the / and the * and global. See&#10;// https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*globals console, exports*/&#10;/*jshint globalstrict: true*/&#10;/*jslint plusplus: true */&#10;'use strict';&#10;&#10;exports.setup = function () {&#10;    this.parameter('correctValues', {&#10;        'value': [0]&#10;    });&#10;    this.input('input');&#10;    this.output('output', {&#10;        'type': 'boolean'&#10;    });&#10;    this.parameter('tolerance', {&#10;        'type': 'number',&#10;        'value': 0.000000001&#10;    });&#10;    this.parameter('trainingMode', {&#10;        'type': 'boolean',&#10;        'value': false&#10;    });&#10;};&#10;&#10;// Input, parameter and variable names match those in $PTII/ptolemy/actor/lib/NonStrictTest.java&#10;&#10;// Set to true if an input is handled.  If no inputs are handled, then&#10;// throw an exception in wrapup().&#10;var inputHandled = false;&#10;&#10;// Set to true when initialize() is called.&#10;var initialized = false;&#10;&#10;// The number of input tokens that have been read in.&#10;var numberOfInputTokensSeen = 0;&#10;&#10;// If trainingMode is true, then inputs that have been seen so far.&#10;var trainingTokens = [];&#10;&#10;// Set to false in initialize() and true at the end of wrapup().&#10;// FIXME: We should have an exit hook that checks that wrapup() is called for all the actors.&#10;var wrappedUp = false;&#10;&#10;// So we can test this in hosts/node/test/mocha/testMain.js to test that wrapup was called.&#10;exports.wrappedUp = wrappedUp;&#10;&#10;/** Create an input handler to compare the input with the appropriate element(s)&#10; *  from correctValues.&#10; */&#10;exports.initialize = function () {&#10;    //console.log(&quot;Test initialize(): typeof correctValues: &quot; + typeof this.getParameter('correctValues'))&#10;    var inputValueValue,&#10;        self = this;&#10;&#10;    trainingTokens = [];&#10;    exports.wrappedUp = false;&#10;    numberOfInputTokensSeen = 0;&#10;&#10;    this.addInputHandler('input', function () {&#10;        var cache = [],&#10;            inputValue = self.get('input'),&#10;            inputValueValue;&#10;        inputHandled = true;&#10;&#10;        // If the input is not connected, then inputValue will be null.&#10;        if (self.getParameter('trainingMode')) {&#10;            trainingTokens.push(inputValue);&#10;            self.send('output', false);&#10;            return;&#10;        }&#10;        var correctValuesValues = self.getParameter('correctValues');&#10;&#10;        if (numberOfInputTokensSeen &lt; correctValuesValues.length) {&#10;            var referenceToken = correctValuesValues[numberOfInputTokensSeen];&#10;            //console.log(&quot;Test: &quot; + numberOfInputTokensSeen + &quot;, input: &quot; + inputValue&#10;            //+ &quot;, referenceToken: &quot; + referenceToken);&#10;            if (typeof inputValue !== 'boolean' &amp;&amp;&#10;                typeof inputValue !== 'number' &amp;&amp;&#10;                typeof inputValue !== 'object' &amp;&amp;&#10;                typeof inputValue !== 'string') {&#10;                if (inputValue === null) {&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                        ' tokens, the value of the input was null?  ' +&#10;                        'Perhaps the input is not connected?'&#10;                    );&#10;                }&#10;                cache = [];&#10;                inputValueValue = JSON.stringify(inputValue, function (key, value) {&#10;                    if (typeof value === 'object' &amp;&amp; value !== null) {&#10;                        if (cache.indexOf(value) !== -1) {&#10;                            // Circular reference found, discard key&#10;                            return;&#10;                        }&#10;                        // Store value in our collection&#10;                        cache.push(value);&#10;                    }&#10;                    return value;&#10;                });&#10;                if (inputValueValue.length &gt; 100) {&#10;                    inputValueValue = inputValueValue.substring(0, 100) + '...';&#10;                }&#10;                cache = null; // Enable garbage collection&#10;&#10;&#10;                throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                    ' tokens, the input &quot;' + inputValue +&#10;                    '&quot; is neither a number nor a string, it is a ' +&#10;                    typeof inputValue + ' with value ' + inputValueValue);&#10;            }&#10;            if (typeof referenceToken === 'boolean') {&#10;                // If the input not a boolean, then throw an error.&#10;                if (typeof inputValue !== 'boolean') {&#10;                    inputValueValue = inputValue;&#10;                    if (typeof inputValue === 'object') {&#10;                        inputValueValue = JSON.stringify(inputValue, function (key, value) {&#10;                            if (typeof value === 'object' &amp;&amp; value !== null) {&#10;                                if (cache.indexOf(value) !== -1) {&#10;                                    // Circular reference found, discard key&#10;                                    return;&#10;                                }&#10;                                // Store value in our collection&#10;                                cache.push(value);&#10;                            }&#10;                            return value;&#10;                        });&#10;                    }&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                    ' tokens, the input &quot;' + inputValueValue +&#10;                                    '&quot; is not a boolean, it is a ' +&#10;                                    typeof inputValue + '.  The expected value was &quot;' +&#10;                                    referenceToken + '&quot;');&#10;                }&#10;                if (inputValue !== referenceToken) {&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                    ' tokens, the input &quot;' + inputValue + '&quot; is not equal to &quot;' +&#10;                                    referenceToken + '&quot;');&#10;                }&#10;            } else if (typeof referenceToken === 'number') {&#10;                // If the input not a number, then throw an error.&#10;                if (typeof inputValue !== 'number') {&#10;                    inputValueValue = inputValue;&#10;                    if (typeof inputValue === 'object') {&#10;                        inputValueValue = JSON.stringify(inputValue, function (key, value) {&#10;                            if (typeof value === 'object' &amp;&amp; value !== null) {&#10;                                if (cache.indexOf(value) !== -1) {&#10;                                    // Circular reference found, discard key&#10;                                    return;&#10;                                }&#10;                                // Store value in our collection&#10;                                cache.push(value);&#10;                            }&#10;                            return value;&#10;                        });&#10;                    }&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                    ' tokens, the input &quot;' + inputValueValue +&#10;                                    '&quot; is not a number, it is a ' +&#10;                                    typeof inputValue + '.  The expected value was &quot;' +&#10;                                    referenceToken + '&quot;');&#10;                }&#10;&#10;                var difference = Math.abs(inputValue - referenceToken);&#10;                if (isNaN(difference)) {&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                    ' tokens, the absolute value of the input &quot;' +&#10;                                    inputValue + '&quot; - the referenceToken &quot;' +&#10;                                    referenceToken + '&quot; is NaN?  It should be less than ' +&#10;                                    self.getParameter('tolerance'));&#10;                }&#10;                if (difference &gt; self.getParameter('tolerance')) {&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                    ' tokens, the input &quot;' + inputValue + '&quot; is not within &quot;' +&#10;                                    self.getParameter('tolerance') +&#10;                                    '&quot; of the expected value &quot;' +&#10;                                    referenceToken + '&quot;');&#10;                }&#10;            } else if (typeof referenceToken === 'string') {&#10;                if (inputValue !== referenceToken) {&#10;                    // devices/test/auto/WatchEmulator.js needs this test for object because&#10;                    // if we receive a JSON object, then we should try to stringify it.&#10;                    if (typeof inputValue === 'object') {&#10;                        inputValueValue = null;&#10;                        try {&#10;                            inputValueValue = JSON.stringify(inputValue);&#10;                        } catch (err) {&#10;                            throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                            ' tokens, the input &quot;' + inputValue + '&quot; is !== ' +&#10;                                            ' to the expected value &quot;' +&#10;                                            referenceToken + '&quot;.  The input was an object, and a string was expected.');&#10;                        }&#10;                        if (inputValueValue !== referenceToken) {&#10;                            throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                            ' tokens, the input &quot;' + inputValueValue + '&quot; is !== ' +&#10;                                            ' to the expected value &quot;' +&#10;                                            referenceToken +&#10;                                            '&quot;.  The input was an object and JSON.stringify() did not throw an exception.' +&#10;                                            'A string was expected.');&#10;                        }&#10;                    }&#10;                }&#10;            } else if (typeof referenceToken === 'object') {&#10;                cache = [];&#10;                inputValueValue = JSON.stringify(inputValue, function (key, value) {&#10;                    if (typeof value === 'object' &amp;&amp; value !== null) {&#10;                        if (cache.indexOf(value) !== -1) {&#10;                            // Circular reference found, discard key&#10;                            return;&#10;                        }&#10;                        // Store value in our collection&#10;                        cache.push(value);&#10;                    }&#10;                    return value;&#10;                });&#10;                cache = [];&#10;                var referenceTokenValue = JSON.stringify(referenceToken, function (key, value) {&#10;                    if (typeof value === 'object' &amp;&amp; value !== null) {&#10;                        if (cache.indexOf(value) !== -1) {&#10;                            // Circular reference found, discard key&#10;                            return;&#10;                        }&#10;                        // Store value in our collection&#10;                        cache.push(value);&#10;                    }&#10;                    return value;&#10;                });&#10;&#10;                cache = null; // Enable garbage collection&#10;&#10;                // If we are comparing longs from CapeCode, then the values will be like &quot;1L&quot;,&#10;                // and stringify will return undefined.&#10;                if (inputValueValue === undefined) {&#10;                    inputValueValue = inputValue;&#10;                }&#10;                if (referenceTokenValue === undefined) {&#10;                    referenceTokenValue = referenceToken;&#10;                }&#10;&#10;                if (inputValueValue !== referenceTokenValue) {&#10;                    // inputValueValue could still be undefined here if inputValue&#10;                    // was undefined.&#10;                    if (inputValueValue !== undefined &amp;&amp; inputValueValue.length &gt; 100) {&#10;                        inputValueValue = inputValueValue.substring(0, 100) + '...';&#10;                    }&#10;                    if (referenceTokenValue !== undefined &amp;&amp; referenceTokenValue.length &gt; 100) {&#10;                        referenceTokenValue = referenceTokenValue.substring(0, 100) + '...';&#10;                    }&#10;                    // Deal with referenceTokens with value 1L.&#10;                    if (typeof inputValueValue !== 'object' || typeof referenceTokenValue !== 'object' &amp;&amp;&#10;                        inputValueValue.toString() !== referenceTokenValue.toString) {&#10;                        throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                        'tokens, the input &quot;' + inputValueValue +&#10;                                        '&quot; is !== to the expected value &quot;' +&#10;                                        referenceTokenValue + '&quot; typeof inputValueValue: ' + typeof inputValueValue + ' typeof referenceTokenValue: ' + typeof referenceTokenValue);&#10;                    }&#10;                }&#10;            } else {&#10;                throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                    ' tokens, the referenceToken &quot;' + referenceToken +&#10;                    '&quot; is not a number, it is a ' +&#10;                    typeof referenceToken);&#10;            }&#10;            numberOfInputTokensSeen += 1;&#10;            // If we are past the end of the expected inputs, then read&#10;            if (numberOfInputTokensSeen &gt;= correctValuesValues.length) {&#10;                self.send('output', true);&#10;            } else {&#10;                self.send('output', false);&#10;            }&#10;        } else {&#10;            self.send('output', true);&#10;        }&#10;    });&#10;    initialized = true;&#10;};&#10;&#10;/** If trainingMode is true, then updated the correctValues. */&#10;exports.wrapup = function () {&#10;    if (this.getParameter('trainingMode')) {&#10;        this.setParameter('correctValues', trainingTokens);&#10;    } else {&#10;        if (initialized) {&#10;            if (!inputHandled) {&#10;                initialized = false;&#10;                throw new Error(this.accessorName + ': The input handler of this accessor was never invoked. ' +&#10;                    'Usually, this is an error indicating that ' +&#10;                    'starvation is occurring.');&#10;            }&#10;            var correctValuesValues = this.getParameter('correctValues');&#10;            if (numberOfInputTokensSeen &lt; correctValuesValues.length) {&#10;                throw new Error(this.accessorName + ': The test produced only ' +&#10;                    numberOfInputTokensSeen +&#10;                    ' tokens, yet the correctValues parameter was ' +&#10;                    'expecting ' +&#10;                    correctValuesValues.length +&#10;                    ' tokens');&#10;            }&#10;        }&#10;        initialized = false;&#10;    }&#10;    var name = this.accessorName;&#10;&#10;    // FIXME: Should we check to see if the name has no dots in and if&#10;    // it does not, add the container name?&#10;&#10;    //if (this.container) {&#10;    //    name = this.container.accessorName + &quot;.&quot; + name;&#10;    //}&#10;&#10;    //&#10;    exports.wrappedUp = true;&#10;    // console.log(&quot;TrainableTest.js: wrapup() finished: &quot; + name + &quot;, exports.wrappedUp: &quot; + exports.wrappedUp);&#10;&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/test/TrainableTest.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Compare the input with a known good input.&#10; If you set ''trainingMode'' to true and provide inputs, then the&#10; inputs will be recorded in the ''correctValues'' parameters.&#10; Otherwise, the inputs will be compared against those in the&#10; ''correctValue'' parameter.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Christopher Brooks based on the Ptolemy NonStrictTest actor by Paul Whitaker, Christopher Hylands, Edward A. Lee">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="input (port)" class="ptolemy.kernel.util.StringAttribute" value="The input value.">
            </property>
            <property name="output (port)" class="ptolemy.kernel.util.StringAttribute" value="False as long as there is data to compare against the input">
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[485.0, 310.0]">
        </property>
        <property name="correctValues" class="ptolemy.data.expr.Parameter" value="{&quot;{\n   \&quot;results\&quot; : [\n      {\n         \&quot;address_components\&quot; : [\n            {\n               \&quot;long_name\&quot; : \&quot;South Hall Road\&quot;,\n               \&quot;short_name\&quot; : \&quot;S Hall Rd\&quot;,\n               \&quot;types\&quot; : [ \&quot;route\&quot; ]\n            },\n            {\n               \&quot;long_name\&quot; : \&quot;Berkeley\&quot;,\n               \&quot;short_name\&quot; : \&quot;Berkeley\&quot;,\n               \&quot;types\&quot; : [ \&quot;locality\&quot;, \&quot;political\&quot; ]\n            },\n            {\n               \&quot;long_name\&quot; : \&quot;Alameda County\&quot;,\n               \&quot;short_name\&quot; : \&quot;Alameda County\&quot;,\n               \&quot;types\&quot; : [ \&quot;administrative_area_level_2\&quot;, \&quot;political\&quot; ]\n            },\n            {\n               \&quot;long_name\&quot; : \&quot;California\&quot;,\n               \&quot;short_name\&quot; : \&quot;CA\&quot;,\n               \&quot;types\&quot; : [ \&quot;administrative_area_level_1\&quot;, \&quot;political\&quot; ]\n            },\n            {\n               \&quot;long_name\&quot; : \&quot;United States\&quot;,\n               \&quot;short_name\&quot; : \&quot;US\&quot;,\n               \&quot;types\&quot; : [ \&quot;country\&quot;, \&quot;political\&quot; ]\n            },\n            {\n               \&quot;long_name\&quot; : \&quot;94720\&quot;,\n               \&quot;short_name\&quot; : \&quot;94720\&quot;,\n               \&quot;types\&quot; : [ \&quot;postal_code\&quot; ]\n            }\n         ],\n         \&quot;formatted_address\&quot; : \&quot;S Hall Rd, Berkeley, CA 94720, USA\&quot;,\n         \&quot;geometry\&quot; : {\n            \&quot;bounds\&quot; : {\n               \&quot;northeast\&quot; : {\n                  \&quot;lat\&quot; : 37.8719068,\n                  \&quot;lng\&quot; : -122.2582525\n               },\n               \&quot;southwest\&quot; : {\n                  \&quot;lat\&quot; : 37.8717533,\n                  \&quot;lng\&quot; : -122.2583071\n               }\n            },\n            \&quot;location\&quot; : {\n               \&quot;lat\&quot; : 37.8718301,\n               \&quot;lng\&quot; : -122.2582798\n            },\n            \&quot;location_type\&quot; : \&quot;GEOMETRIC_CENTER\&quot;,\n            \&quot;viewport\&quot; : {\n               \&quot;northeast\&quot; : {\n                  \&quot;lat\&quot; : 37.8731790302915,\n                  \&quot;lng\&quot; : -122.2569308197085\n               },\n               \&quot;southwest\&quot; : {\n                  \&quot;lat\&quot; : 37.8704810697085,\n                  \&quot;lng\&quot; : -122.2596287802915\n               }\n            }\n         },\n         \&quot;place_id\&quot; : \&quot;ChIJ36n_SSR8hYARpiCiq5tJmOI\&quot;,\n         \&quot;types\&quot; : [ \&quot;route\&quot; ]\n      },\n      {\n         \&quot;address_components\&quot; : [\n            {\n               \&quot;long_name\&quot; : \&quot;Berkeley\&quot;,\n               \&quot;short_name\&quot; : \&quot;Berkeley\&quot;,\n               \&quot;types\&quot; : [ \&quot;locality\&quot;, \&quot;political\&quot; ]\n            },\n            {\n               \&quot;long_name\&quot; : \&quot;Alameda County\&quot;,\n               \&quot;short_name\&quot; : \&quot;Alameda County\&quot;,\n               \&quot;types\&quot; : [ \&quot;administrative_area_level_2\&quot;, \&quot;political\&quot; ]\n            },\n            {\n               \&quot;long_name\&quot; : \&quot;California\&quot;,\n               \&quot;short_name\&quot; : \&quot;CA\&quot;,\n               \&quot;types\&quot; : [ \&quot;administrative_area_level_1\&quot;, \&quot;political\&quot; ]\n            },\n            {\n               \&quot;long_name\&quot; : \&quot;United States\&quot;,\n               \&quot;short_name\&quot; : \&quot;US\&quot;,\n               \&quot;types\&quot; : [ \&quot;country\&quot;, \&quot;political\&quot; ]\n            }\n         ],\n         \&quot;formatted_address\&quot; : \&quot;Berkeley, CA, USA\&quot;,\n         \&quot;geometry\&quot; : {\n            \&quot;bounds\&quot; : {\n               \&quot;northeast\&quot; : {\n                  \&quot;lat\&quot; : 37.9058239,\n                  \&quot;lng\&quot; : -122.234179\n               },\n               \&quot;southwest\&quot; : {\n                  \&quot;lat\&quot; : 37.835727,\n                  \&quot;lng\&quot; : -122.367781\n               }\n            },\n            \&quot;location\&quot; : {\n               \&quot;lat\&quot; : 37.8715926,\n               \&quot;lng\&quot; : -122.272747\n            },\n            \&quot;location_type\&quot; : \&quot;APPROXIMATE\&quot;,\n            \&quot;viewport\&quot; : {\n               \&quot;northeast\&quot; : {\n                  \&quot;lat\&quot; : 37.9056682,\n                  \&quot;lng\&quot; : -122.234179\n               },\n               \&quot;southwest\&quot; : {\n                  \&quot;lat\&quot; : 37.846226,\n                  \&quot;lng\&quot; : -122.327065\n               }\n            }\n         },\n         \&quot;place_id\&quot; : \&quot;ChIJ00mFOjZ5hYARk-l1ppUV6pQ\&quot;,\n         \&quot;types\&quot; : [ \&quot;locality\&quot;, \&quot;political\&quot; ]\n      },\n      {\n         \&quot;address_components\&quot; : [\n            {\n               \&quot;long_name\&quot; : \&quot;94720\&quot;,\n               \&quot;short_name\&quot; : \&quot;94720\&quot;,\n               \&quot;types\&quot; : [ \&quot;postal_code\&quot; ]\n            },\n            {\n               \&quot;long_name\&quot; : \&quot;Berkeley\&quot;,\n               \&quot;short_name\&quot; : \&quot;Berkeley\&quot;,\n               \&quot;types\&quot; : [ \&quot;locality\&quot;, \&quot;political\&quot; ]\n            },\n            {\n               \&quot;long_name\&quot; : \&quot;Alameda County\&quot;,\n               \&quot;short_name\&quot; : \&quot;Alameda County\&quot;,\n               \&quot;types\&quot; : [ \&quot;administrative_area_level_2\&quot;, \&quot;political\&quot; ]\n            },\n            {\n               \&quot;long_name\&quot; : \&quot;California\&quot;,\n               \&quot;short_name\&quot; : \&quot;CA\&quot;,\n               \&quot;types\&quot; : [ \&quot;administrative_area_level_1\&quot;, \&quot;political\&quot; ]\n            },\n            {\n               \&quot;long_name\&quot; : \&quot;United States\&quot;,\n               \&quot;short_name\&quot; : \&quot;US\&quot;,\n               \&quot;types\&quot; : [ \&quot;country\&quot;, \&quot;political\&quot; ]\n            }\n         ],\n         \&quot;formatted_address\&quot; : \&quot;Berkeley, CA 94720, USA\&quot;,\n         \&quot;geometry\&quot; : {\n            \&quot;bounds\&quot; : {\n               \&quot;northeast\&quot; : {\n                  \&quot;lat\&quot; : 37.881405,\n                  \&quot;lng\&quot; : -122.2448649\n               },\n               \&quot;southwest\&quot; : {\n                  \&quot;lat\&quot; : 37.84554300000001,\n                  \&quot;lng\&quot; : -122.332636\n               }\n            },\n            \&quot;location\&quot; : {\n               \&quot;lat\&quot; : 37.87015100000001,\n               \&quot;lng\&quot; : -122.2594606\n            },\n            \&quot;location_type\&quot; : \&quot;APPROXIMATE\&quot;,\n            \&quot;viewport\&quot; : {\n               \&quot;northeast\&quot; : {\n                  \&quot;lat\&quot; : 37.8813631,\n                  \&quot;lng\&quot; : -122.2448649\n               },\n               \&quot;southwest\&quot; : {\n                  \&quot;lat\&quot; : 37.860034,\n                  \&quot;lng\&quot; : -122.273656\n               }\n            }\n         },\n         \&quot;place_id\&quot; : \&quot;ChIJOS44Gjl8hYARjMTPdlBMDls\&quot;,\n         \&quot;types\&quot; : [ \&quot;postal_code\&quot; ]\n      },\n      {\n         \&quot;address_components\&quot; : [\n            {\n               \&quot;long_name\&quot; : \&quot;Alameda County\&quot;,\n               \&quot;short_name\&quot; : \&quot;Alameda County\&quot;,\n               \&quot;types\&quot; : [ \&quot;administrative_area_level_2\&quot;, \&quot;political\&quot; ]\n            },\n            {\n               \&quot;long_name\&quot; : \&quot;California\&quot;,\n               \&quot;short_name\&quot; : \&quot;CA\&quot;,\n               \&quot;types\&quot; : [ \&quot;administrative_area_level_1\&quot;, \&quot;political\&quot; ]\n            },\n            {\n               \&quot;long_name\&quot; : \&quot;United States\&quot;,\n               \&quot;short_name\&quot; : \&quot;US\&quot;,\n               \&quot;types\&quot; : [ \&quot;country\&quot;, \&quot;political\&quot; ]\n            }\n         ],\n         \&quot;formatted_address\&quot; : \&quot;Alameda County, CA, USA\&quot;,\n         \&quot;geometry\&quot; : {\n            \&quot;bounds\&quot; : {\n               \&quot;northeast\&quot; : {\n                  \&quot;lat\&quot; : 37.9058239,\n                  \&quot;lng\&quot; : -121.4692139\n               },\n               \&quot;southwest\&quot; : {\n                  \&quot;lat\&quot; : 37.4545388,\n                  \&quot;lng\&quot; : -122.3737821\n               }\n            },\n            \&quot;location\&quot; : {\n               \&quot;lat\&quot; : 37.6016892,\n               \&quot;lng\&quot; : -121.7195459\n            },\n            \&quot;location_type\&quot; : \&quot;APPROXIMATE\&quot;,\n            \&quot;viewport\&quot; : {\n               \&quot;northeast\&quot; : {\n                  \&quot;lat\&quot; : 37.9056682,\n                  \&quot;lng\&quot; : -121.4692139\n               },\n               \&quot;southwest\&quot; : {\n                  \&quot;lat\&quot; : 37.4545388,\n                  \&quot;lng\&quot; : -122.3426648\n               }\n            }\n         },\n         \&quot;place_id\&quot; : \&quot;ChIJWRd5NDfyj4ARc30TGxHHxmg\&quot;,\n         \&quot;types\&quot; : [ \&quot;administrative_area_level_2\&quot;, \&quot;political\&quot; ]\n      },\n      {\n         \&quot;address_components\&quot; : [\n            {\n               \&quot;long_name\&quot; : \&quot;San Francisco-Oakland-Fremont, CA\&quot;,\n               \&quot;short_name\&quot; : \&quot;San Francisco-Oakland-Fremont, CA\&quot;,\n               \&quot;types\&quot; : [ \&quot;political\&quot; ]\n            },\n            {\n               \&quot;long_name\&quot; : \&quot;California\&quot;,\n               \&quot;short_name\&quot; : \&quot;CA\&quot;,\n               \&quot;types\&quot; : [ \&quot;administrative_area_level_1\&quot;, \&quot;political\&quot; ]\n            },\n            {\n               \&quot;long_name\&quot; : \&quot;United States\&quot;,\n               \&quot;short_name\&quot; : \&quot;US\&quot;,\n               \&quot;types\&quot; : [ \&quot;country\&quot;, \&quot;political\&quot; ]\n            }\n         ],\n         \&quot;formatted_address\&quot; : \&quot;San Francisco-Oakland-Fremont, CA, CA, USA\&quot;,\n         \&quot;geometry\&quot; : {\n            \&quot;bounds\&quot; : {\n               \&quot;northeast\&quot; : {\n                  \&quot;lat\&quot; : 38.320945,\n                  \&quot;lng\&quot; : -121.4692749\n               },\n               \&quot;southwest\&quot; : {\n                  \&quot;lat\&quot; : 37.1073458,\n                  \&quot;lng\&quot; : -123.024066\n               }\n            },\n            \&quot;location\&quot; : {\n               \&quot;lat\&quot; : 37.8043507,\n               \&quot;lng\&quot; : -121.8107079\n            },\n            \&quot;location_type\&quot; : \&quot;APPROXIMATE\&quot;,\n            \&quot;viewport\&quot; : {\n               \&quot;northeast\&quot; : {\n                  \&quot;lat\&quot; : 38.320945,\n                  \&quot;lng\&quot; : -121.4692749\n               },\n               \&quot;southwest\&quot; : {\n                  \&quot;lat\&quot; : 37.1073458,\n                  \&quot;lng\&quot; : -123.024066\n               }\n            }\n         },\n         \&quot;place_id\&quot; : \&quot;ChIJGUN8-q6Ij4ARZ1tA_OojshE\&quot;,\n         \&quot;types\&quot; : [ \&quot;political\&quot; ]\n      },\n      {\n         \&quot;address_components\&quot; : [\n            {\n               \&quot;long_name\&quot; : \&quot;San Francisco Metropolitan Area\&quot;,\n               \&quot;short_name\&quot; : \&quot;San Francisco Metropolitan Area\&quot;,\n               \&quot;types\&quot; : [ \&quot;political\&quot; ]\n            },\n            {\n               \&quot;long_name\&quot; : \&quot;California\&quot;,\n               \&quot;short_name\&quot; : \&quot;CA\&quot;,\n               \&quot;types\&quot; : [ \&quot;administrative_area_level_1\&quot;, \&quot;political\&quot; ]\n            },\n            {\n               \&quot;long_name\&quot; : \&quot;United States\&quot;,\n               \&quot;short_name\&quot; : \&quot;US\&quot;,\n               \&quot;types\&quot; : [ \&quot;country\&quot;, \&quot;political\&quot; ]\n            }\n         ],\n         \&quot;formatted_address\&quot; : \&quot;San Francisco Metropolitan Area, CA, USA\&quot;,\n         \&quot;geometry\&quot; : {\n            \&quot;bounds\&quot; : {\n               \&quot;northeast\&quot; : {\n                  \&quot;lat\&quot; : 38.320945,\n                  \&quot;lng\&quot; : -121.4692139\n               },\n               \&quot;southwest\&quot; : {\n                  \&quot;lat\&quot; : 37.0538579,\n                  \&quot;lng\&quot; : -123.173825\n               }\n            },\n            \&quot;location\&quot; : {\n               \&quot;lat\&quot; : 37.7749274,\n               \&quot;lng\&quot; : -122.4194254\n            },\n            \&quot;location_type\&quot; : \&quot;APPROXIMATE\&quot;,\n            \&quot;viewport\&quot; : {\n               \&quot;northeast\&quot; : {\n                  \&quot;lat\&quot; : 38.320945,\n                  \&quot;lng\&quot; : -121.4692139\n               },\n               \&quot;southwest\&quot; : {\n                  \&quot;lat\&quot; : 37.0538579,\n                  \&quot;lng\&quot; : -123.173825\n               }\n            }\n         },\n         \&quot;place_id\&quot; : \&quot;ChIJE156BviCj4ARKrqKa5lkEu4\&quot;,\n         \&quot;types\&quot; : [ \&quot;political\&quot; ]\n      },\n      {\n         \&quot;address_components\&quot; : [\n            {\n               \&quot;long_name\&quot; : \&quot;California\&quot;,\n               \&quot;short_name\&quot; : \&quot;CA\&quot;,\n               \&quot;types\&quot; : [\n                  \&quot;administrative_area_level_1\&quot;,\n                  \&quot;establishment\&quot;,\n                  \&quot;point_of_interest\&quot;,\n                  \&quot;political\&quot;\n               ]\n            },\n            {\n               \&quot;long_name\&quot; : \&quot;United States\&quot;,\n               \&quot;short_name\&quot; : \&quot;US\&quot;,\n               \&quot;types\&quot; : [ \&quot;country\&quot;, \&quot;political\&quot; ]\n            }\n         ],\n         \&quot;formatted_address\&quot; : \&quot;California, USA\&quot;,\n         \&quot;geometry\&quot; : {\n            \&quot;bounds\&quot; : {\n               \&quot;northeast\&quot; : {\n                  \&quot;lat\&quot; : 42.0095169,\n                  \&quot;lng\&quot; : -114.131211\n               },\n               \&quot;southwest\&quot; : {\n                  \&quot;lat\&quot; : 32.528832,\n                  \&quot;lng\&quot; : -124.482003\n               }\n            },\n            \&quot;location\&quot; : {\n               \&quot;lat\&quot; : 36.778261,\n               \&quot;lng\&quot; : -119.4179324\n            },\n            \&quot;location_type\&quot; : \&quot;APPROXIMATE\&quot;,\n            \&quot;viewport\&quot; : {\n               \&quot;northeast\&quot; : {\n                  \&quot;lat\&quot; : 42.009378,\n                  \&quot;lng\&quot; : -114.131211\n               },\n               \&quot;southwest\&quot; : {\n                  \&quot;lat\&quot; : 32.5342852,\n                  \&quot;lng\&quot; : -124.4151821\n               }\n            }\n         },\n         \&quot;place_id\&quot; : \&quot;ChIJPV4oX_65j4ARVW8IJ6IJUYs\&quot;,\n         \&quot;types\&quot; : [\n            \&quot;administrative_area_level_1\&quot;,\n            \&quot;establishment\&quot;,\n            \&quot;point_of_interest\&quot;,\n            \&quot;political\&quot;\n         ]\n      },\n      {\n         \&quot;address_components\&quot; : [\n            {\n               \&quot;long_name\&quot; : \&quot;United States\&quot;,\n               \&quot;short_name\&quot; : \&quot;US\&quot;,\n               \&quot;types\&quot; : [ \&quot;country\&quot;, \&quot;political\&quot; ]\n            }\n         ],\n         \&quot;formatted_address\&quot; : \&quot;United States\&quot;,\n         \&quot;geometry\&quot; : {\n            \&quot;bounds\&quot; : {\n               \&quot;northeast\&quot; : {\n                  \&quot;lat\&quot; : 71.5388001,\n                  \&quot;lng\&quot; : -66.885417\n               },\n               \&quot;southwest\&quot; : {\n                  \&quot;lat\&quot; : 18.7763,\n                  \&quot;lng\&quot; : 170.5957\n               }\n            },\n            \&quot;location\&quot; : {\n               \&quot;lat\&quot; : 37.09024,\n               \&quot;lng\&quot; : -95.712891\n            },\n            \&quot;location_type\&quot; : \&quot;APPROXIMATE\&quot;,\n            \&quot;viewport\&quot; : {\n               \&quot;northeast\&quot; : {\n                  \&quot;lat\&quot; : 49.38,\n                  \&quot;lng\&quot; : -66.94\n               },\n               \&quot;southwest\&quot; : {\n                  \&quot;lat\&quot; : 25.82,\n                  \&quot;lng\&quot; : -124.39\n               }\n            }\n         },\n         \&quot;place_id\&quot; : \&quot;ChIJCzYy5IS16lQRQrfeQ5K5Oxw\&quot;,\n         \&quot;types\&quot; : [ \&quot;country\&quot;, \&quot;political\&quot; ]\n      }\n   ],\n   \&quot;status\&quot; : \&quot;OK\&quot;\n}\n&quot;}">
        </property>
        <property name="trainingMode" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <port name="input" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="TestDisplay" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Display data on the console.&#10;//&#10;// Copyright (c) 2016-2016 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;&#10;/** Display data on the console using util.inspect().&#10; *&#10; *  @accessor test/TestDisplay&#10; *  @param input The output&#10; *  @author Christopher Brooks&#10; *  @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint.  Note that there should be no&#10;// space between the / and the * and global.&#10;/*globals console, error, exports, require */&#10;/*jshint globalstrict: true*/&#10;&quot;use strict&quot;;&#10;&#10;var util = require('util');&#10;&#10;exports.setup = function () {&#10;    this.input('input');&#10;    this.output('output');&#10;};&#10;&#10;exports.initialize = function () {&#10;    this.addInputHandler('input', function () {&#10;        var inputValue = this.get('input');&#10;        console.log(util.inspect(inputValue));&#10;        this.send('output', inputValue);&#10;    });&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/test/TestDisplay.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Display data on the console using util.inspect().&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Christopher Brooks">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[480.0, 395.0]">
        </property>
        <port name="input" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="TestDisplay2" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Display data on the console.&#10;//&#10;// Copyright (c) 2016-2016 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;&#10;/** Display data on the console using util.inspect().&#10; *&#10; *  @accessor test/TestDisplay&#10; *  @param input The output&#10; *  @author Christopher Brooks&#10; *  @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint.  Note that there should be no&#10;// space between the / and the * and global.&#10;/*globals console, error, exports, require */&#10;/*jshint globalstrict: true*/&#10;&quot;use strict&quot;;&#10;&#10;var util = require('util');&#10;&#10;exports.setup = function () {&#10;    this.input('input');&#10;    this.output('output');&#10;};&#10;&#10;exports.initialize = function () {&#10;    this.addInputHandler('input', function () {&#10;        var inputValue = this.get('input');&#10;        console.log(util.inspect(inputValue));&#10;        this.send('output', inputValue);&#10;    });&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/test/TestDisplay.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Display data on the console using util.inspect().&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Christopher Brooks">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{620.0, 355.0}">
        </property>
        <port name="input" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="TrainableTest2" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2016-2017 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;/** Compare the input with a known good input.&#10; *  If you set ''trainingMode'' to true and provide inputs, then the&#10; *  inputs will be recorded in the ''correctValues'' parameters.&#10; *  Otherwise, the inputs will be compared against those in the&#10; *  ''correctValue'' parameter.&#10; *&#10; *  @accessor test/TrainableTest&#10; *  @input input The input value.&#10; *  @output output False as long as there is data to compare against the input&#10; *  @param correctValues a JSON array of the correct values.&#10; *  @param trainingMode true if the input is being trained.&#10; *  @author Christopher Brooks based on the Ptolemy NonStrictTest actor by Paul Whitaker, Christopher Hylands, Edward A. Lee&#10; *  @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should&#10;// be no space between the / and the * and global. See&#10;// https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*globals console, exports*/&#10;/*jshint globalstrict: true*/&#10;/*jslint plusplus: true */&#10;'use strict';&#10;&#10;exports.setup = function () {&#10;    this.parameter('correctValues', {&#10;        'value': [0]&#10;    });&#10;    this.input('input');&#10;    this.output('output', {&#10;        'type': 'boolean'&#10;    });&#10;    this.parameter('tolerance', {&#10;        'type': 'number',&#10;        'value': 0.000000001&#10;    });&#10;    this.parameter('trainingMode', {&#10;        'type': 'boolean',&#10;        'value': false&#10;    });&#10;};&#10;&#10;// Input, parameter and variable names match those in $PTII/ptolemy/actor/lib/NonStrictTest.java&#10;&#10;// Set to true if an input is handled.  If no inputs are handled, then&#10;// throw an exception in wrapup().&#10;var inputHandled = false;&#10;&#10;// Set to true when initialize() is called.&#10;var initialized = false;&#10;&#10;// The number of input tokens that have been read in.&#10;var numberOfInputTokensSeen = 0;&#10;&#10;// If trainingMode is true, then inputs that have been seen so far.&#10;var trainingTokens = [];&#10;&#10;// Set to false in initialize() and true at the end of wrapup().&#10;// FIXME: We should have an exit hook that checks that wrapup() is called for all the actors.&#10;var wrappedUp = false;&#10;&#10;// So we can test this in hosts/node/test/mocha/testMain.js to test that wrapup was called.&#10;exports.wrappedUp = wrappedUp;&#10;&#10;/** Create an input handler to compare the input with the appropriate element(s)&#10; *  from correctValues.&#10; */&#10;exports.initialize = function () {&#10;    //console.log(&quot;Test initialize(): typeof correctValues: &quot; + typeof this.getParameter('correctValues'))&#10;    var inputValueValue,&#10;        self = this;&#10;&#10;    trainingTokens = [];&#10;    exports.wrappedUp = false;&#10;    numberOfInputTokensSeen = 0;&#10;&#10;    this.addInputHandler('input', function () {&#10;        var cache = [],&#10;            inputValue = self.get('input'),&#10;            inputValueValue;&#10;        inputHandled = true;&#10;&#10;        // If the input is not connected, then inputValue will be null.&#10;        if (self.getParameter('trainingMode')) {&#10;            trainingTokens.push(inputValue);&#10;            self.send('output', false);&#10;            return;&#10;        }&#10;        var correctValuesValues = self.getParameter('correctValues');&#10;&#10;        if (numberOfInputTokensSeen &lt; correctValuesValues.length) {&#10;            var referenceToken = correctValuesValues[numberOfInputTokensSeen];&#10;            //console.log(&quot;Test: &quot; + numberOfInputTokensSeen + &quot;, input: &quot; + inputValue&#10;            //+ &quot;, referenceToken: &quot; + referenceToken);&#10;            if (typeof inputValue !== 'boolean' &amp;&amp;&#10;                typeof inputValue !== 'number' &amp;&amp;&#10;                typeof inputValue !== 'object' &amp;&amp;&#10;                typeof inputValue !== 'string') {&#10;                if (inputValue === null) {&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                        ' tokens, the value of the input was null?  ' +&#10;                        'Perhaps the input is not connected?'&#10;                    );&#10;                }&#10;                cache = [];&#10;                inputValueValue = JSON.stringify(inputValue, function (key, value) {&#10;                    if (typeof value === 'object' &amp;&amp; value !== null) {&#10;                        if (cache.indexOf(value) !== -1) {&#10;                            // Circular reference found, discard key&#10;                            return;&#10;                        }&#10;                        // Store value in our collection&#10;                        cache.push(value);&#10;                    }&#10;                    return value;&#10;                });&#10;                if (inputValueValue.length &gt; 100) {&#10;                    inputValueValue = inputValueValue.substring(0, 100) + '...';&#10;                }&#10;                cache = null; // Enable garbage collection&#10;&#10;&#10;                throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                    ' tokens, the input &quot;' + inputValue +&#10;                    '&quot; is neither a number nor a string, it is a ' +&#10;                    typeof inputValue + ' with value ' + inputValueValue);&#10;            }&#10;            if (typeof referenceToken === 'boolean') {&#10;                // If the input not a boolean, then throw an error.&#10;                if (typeof inputValue !== 'boolean') {&#10;                    inputValueValue = inputValue;&#10;                    if (typeof inputValue === 'object') {&#10;                        inputValueValue = JSON.stringify(inputValue, function (key, value) {&#10;                            if (typeof value === 'object' &amp;&amp; value !== null) {&#10;                                if (cache.indexOf(value) !== -1) {&#10;                                    // Circular reference found, discard key&#10;                                    return;&#10;                                }&#10;                                // Store value in our collection&#10;                                cache.push(value);&#10;                            }&#10;                            return value;&#10;                        });&#10;                    }&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                    ' tokens, the input &quot;' + inputValueValue +&#10;                                    '&quot; is not a boolean, it is a ' +&#10;                                    typeof inputValue + '.  The expected value was &quot;' +&#10;                                    referenceToken + '&quot;');&#10;                }&#10;                if (inputValue !== referenceToken) {&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                    ' tokens, the input &quot;' + inputValue + '&quot; is not equal to &quot;' +&#10;                                    referenceToken + '&quot;');&#10;                }&#10;            } else if (typeof referenceToken === 'number') {&#10;                // If the input not a number, then throw an error.&#10;                if (typeof inputValue !== 'number') {&#10;                    inputValueValue = inputValue;&#10;                    if (typeof inputValue === 'object') {&#10;                        inputValueValue = JSON.stringify(inputValue, function (key, value) {&#10;                            if (typeof value === 'object' &amp;&amp; value !== null) {&#10;                                if (cache.indexOf(value) !== -1) {&#10;                                    // Circular reference found, discard key&#10;                                    return;&#10;                                }&#10;                                // Store value in our collection&#10;                                cache.push(value);&#10;                            }&#10;                            return value;&#10;                        });&#10;                    }&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                    ' tokens, the input &quot;' + inputValueValue +&#10;                                    '&quot; is not a number, it is a ' +&#10;                                    typeof inputValue + '.  The expected value was &quot;' +&#10;                                    referenceToken + '&quot;');&#10;                }&#10;&#10;                var difference = Math.abs(inputValue - referenceToken);&#10;                if (isNaN(difference)) {&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                    ' tokens, the absolute value of the input &quot;' +&#10;                                    inputValue + '&quot; - the referenceToken &quot;' +&#10;                                    referenceToken + '&quot; is NaN?  It should be less than ' +&#10;                                    self.getParameter('tolerance'));&#10;                }&#10;                if (difference &gt; self.getParameter('tolerance')) {&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                    ' tokens, the input &quot;' + inputValue + '&quot; is not within &quot;' +&#10;                                    self.getParameter('tolerance') +&#10;                                    '&quot; of the expected value &quot;' +&#10;                                    referenceToken + '&quot;');&#10;                }&#10;            } else if (typeof referenceToken === 'string') {&#10;                if (inputValue !== referenceToken) {&#10;                    // devices/test/auto/WatchEmulator.js needs this test for object because&#10;                    // if we receive a JSON object, then we should try to stringify it.&#10;                    if (typeof inputValue === 'object') {&#10;                        inputValueValue = null;&#10;                        try {&#10;                            inputValueValue = JSON.stringify(inputValue);&#10;                        } catch (err) {&#10;                            throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                            ' tokens, the input &quot;' + inputValue + '&quot; is !== ' +&#10;                                            ' to the expected value &quot;' +&#10;                                            referenceToken + '&quot;.  The input was an object, and a string was expected.');&#10;                        }&#10;                        if (inputValueValue !== referenceToken) {&#10;                            throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                            ' tokens, the input &quot;' + inputValueValue + '&quot; is !== ' +&#10;                                            ' to the expected value &quot;' +&#10;                                            referenceToken +&#10;                                            '&quot;.  The input was an object and JSON.stringify() did not throw an exception.' +&#10;                                            'A string was expected.');&#10;                        }&#10;                    }&#10;                }&#10;            } else if (typeof referenceToken === 'object') {&#10;                cache = [];&#10;                inputValueValue = JSON.stringify(inputValue, function (key, value) {&#10;                    if (typeof value === 'object' &amp;&amp; value !== null) {&#10;                        if (cache.indexOf(value) !== -1) {&#10;                            // Circular reference found, discard key&#10;                            return;&#10;                        }&#10;                        // Store value in our collection&#10;                        cache.push(value);&#10;                    }&#10;                    return value;&#10;                });&#10;                cache = [];&#10;                var referenceTokenValue = JSON.stringify(referenceToken, function (key, value) {&#10;                    if (typeof value === 'object' &amp;&amp; value !== null) {&#10;                        if (cache.indexOf(value) !== -1) {&#10;                            // Circular reference found, discard key&#10;                            return;&#10;                        }&#10;                        // Store value in our collection&#10;                        cache.push(value);&#10;                    }&#10;                    return value;&#10;                });&#10;&#10;                cache = null; // Enable garbage collection&#10;&#10;                // If we are comparing longs from CapeCode, then the values will be like &quot;1L&quot;,&#10;                // and stringify will return undefined.&#10;                if (inputValueValue === undefined) {&#10;                    inputValueValue = inputValue;&#10;                }&#10;                if (referenceTokenValue === undefined) {&#10;                    referenceTokenValue = referenceToken;&#10;                }&#10;&#10;                if (inputValueValue !== referenceTokenValue) {&#10;                    // inputValueValue could still be undefined here if inputValue&#10;                    // was undefined.&#10;                    if (inputValueValue !== undefined &amp;&amp; inputValueValue.length &gt; 100) {&#10;                        inputValueValue = inputValueValue.substring(0, 100) + '...';&#10;                    }&#10;                    if (referenceTokenValue !== undefined &amp;&amp; referenceTokenValue.length &gt; 100) {&#10;                        referenceTokenValue = referenceTokenValue.substring(0, 100) + '...';&#10;                    }&#10;                    // Deal with referenceTokens with value 1L.&#10;                    if (typeof inputValueValue !== 'object' || typeof referenceTokenValue !== 'object' &amp;&amp;&#10;                        inputValueValue.toString() !== referenceTokenValue.toString) {&#10;                        throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                        'tokens, the input &quot;' + inputValueValue +&#10;                                        '&quot; is !== to the expected value &quot;' +&#10;                                        referenceTokenValue + '&quot; typeof inputValueValue: ' + typeof inputValueValue + ' typeof referenceTokenValue: ' + typeof referenceTokenValue);&#10;                    }&#10;                }&#10;            } else {&#10;                throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                    ' tokens, the referenceToken &quot;' + referenceToken +&#10;                    '&quot; is not a number, it is a ' +&#10;                    typeof referenceToken);&#10;            }&#10;            numberOfInputTokensSeen += 1;&#10;            // If we are past the end of the expected inputs, then read&#10;            if (numberOfInputTokensSeen &gt;= correctValuesValues.length) {&#10;                self.send('output', true);&#10;            } else {&#10;                self.send('output', false);&#10;            }&#10;        } else {&#10;            self.send('output', true);&#10;        }&#10;    });&#10;    initialized = true;&#10;};&#10;&#10;/** If trainingMode is true, then updated the correctValues. */&#10;exports.wrapup = function () {&#10;    if (this.getParameter('trainingMode')) {&#10;        this.setParameter('correctValues', trainingTokens);&#10;    } else {&#10;        if (initialized) {&#10;            if (!inputHandled) {&#10;                initialized = false;&#10;                throw new Error(this.accessorName + ': The input handler of this accessor was never invoked. ' +&#10;                    'Usually, this is an error indicating that ' +&#10;                    'starvation is occurring.');&#10;            }&#10;            var correctValuesValues = this.getParameter('correctValues');&#10;            if (numberOfInputTokensSeen &lt; correctValuesValues.length) {&#10;                throw new Error(this.accessorName + ': The test produced only ' +&#10;                    numberOfInputTokensSeen +&#10;                    ' tokens, yet the correctValues parameter was ' +&#10;                    'expecting ' +&#10;                    correctValuesValues.length +&#10;                    ' tokens');&#10;            }&#10;        }&#10;        initialized = false;&#10;    }&#10;    var name = this.accessorName;&#10;&#10;    // FIXME: Should we check to see if the name has no dots in and if&#10;    // it does not, add the container name?&#10;&#10;    //if (this.container) {&#10;    //    name = this.container.accessorName + &quot;.&quot; + name;&#10;    //}&#10;&#10;    //&#10;    exports.wrappedUp = true;&#10;    // console.log(&quot;TrainableTest.js: wrapup() finished: &quot; + name + &quot;, exports.wrappedUp: &quot; + exports.wrappedUp);&#10;&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/test/TrainableTest.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Compare the input with a known good input.&#10; If you set ''trainingMode'' to true and provide inputs, then the&#10; inputs will be recorded in the ''correctValues'' parameters.&#10; Otherwise, the inputs will be compared against those in the&#10; ''correctValue'' parameter.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Christopher Brooks based on the Ptolemy NonStrictTest actor by Paul Whitaker, Christopher Hylands, Edward A. Lee">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="input (port)" class="ptolemy.kernel.util.StringAttribute" value="The input value.">
            </property>
            <property name="output (port)" class="ptolemy.kernel.util.StringAttribute" value="False as long as there is data to compare against the input">
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[620.0, 435.0]">
        </property>
        <property name="correctValues" class="ptolemy.data.expr.Parameter" value="{&quot;S Hall Rd, Berkeley, CA 94720, USA&quot;}">
        </property>
        <property name="trainingMode" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <port name="input" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation3" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[350.0, 415.0]">
        </vertex>
    </relation>
    <relation name="relation4" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[545.0, 435.0]">
        </vertex>
    </relation>
    <link port="ReverseGeoCoder.response" relation="relation3"/>
    <link port="ReverseGeoCoder.location" relation="relation"/>
    <link port="ReverseGeoCoder.address" relation="relation4"/>
    <link port="LatLongGenerator.location" relation="relation"/>
    <link port="TrainableTest.input" relation="relation3"/>
    <link port="TestDisplay.input" relation="relation3"/>
    <link port="TestDisplay2.input" relation="relation4"/>
    <link port="TrainableTest2.input" relation="relation4"/>
</entity>
