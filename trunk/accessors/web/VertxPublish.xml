<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="renderHTML.xsl"?>
<!DOCTYPE class PUBLIC "-//TerraSwarm//DTD Accessor 1//EN"
    "http://www.terraswarm.org/accessors/Accessor_1.dtd">
<class name="VertxPublish" extends="org.terraswarm.JSAccessor">
  <version>0.1</version>
  <author>Patricia Derler, Edward A. Lee, Ben Zhang</author>
  <input
    name="busHost"
    value="localhost"
    type="string"
    description="The IP address or DNS name of the host for the Vert.x bus server."/>
  <input
    name="busHostPort"
    value="8080"
    type="string"
    description="The port for the host for the Vert.x bus."/>
  <input
    name="address"
    value=""
    type="string"
    description="The event bus address, which is the name of the event stream."/>
  <input
    name="message"
    type="string"
    description="The message to the bus, as a JSON-encoded string."/>       
  <requires name="vertxEventBus"/>
  <documentation type="text/html">
    <![CDATA[
    This accessor publishes to a Vert.x event bus.
	]]>
  </documentation>
  <script type="text/javascript">
    // <![CDATA[
var Vertx = require('vertxEventBus');
var eb = null;
var pendingOutputs = [];
var opened = false;
var connectTries = 0;
var maxTries = 5;
var retryDelay = 2000;  // 2 seconds

function onOpen() {
  opened = true;
}

exports.initialize = function() {
    if (eb == null) {    
        connectTries = 1;    
        eb = new Vertx.VertxBus({host: get(busHost), port: get(busHostPort)});
        eb.on('open', onOpen);
        eb.on('error', function(kind) {
           // Upon connection error, try to connect again after 1 second, up to 3 times
            if (kind != null && kind == 'connect') {
               if (connectTries < maxTries) {
                  setTimeout(function () {
                     connectTries++;
                     eb.connect();
                  }, retryDelay);
               } else {
               // TODO:  How should the accessor signal an error?
               // Create a "status" output port?  Throw an exception?  Call wrapup()?
               print("Publisher cannot connect to the event bus.");
               }
            }
        });
    }
}

exports.fire = function() {
  var msg = get(message);
  if (!opened) {
    print('Queuing for later output: ' + msg);
    pendingOutputs.push(msg);
  } else {
    for (var i = 0; i < pendingOutputs.length; i++) {
      print('Sending to event bus: ' + pendingOutputs[i]);
      eb.publish(get(address), pendingOutputs[i]);
    }
    pendingOutputs = [];
    eb.publish(get(address), msg);
  }
}

exports.wrapup = function() {
    if (opened) { 
       eb.close(); 
    }
    opened = false;
    eb = null;
}
	//  ]]>
  </script>
</class>
