<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="renderHTML.xsl"?>
<!DOCTYPE class PUBLIC "-//TerraSwarm//DTD Accessor 1//EN"
    "http://www.terraswarm.org/accessors/Accessor_1.dtd">
<class name="VertxPublish" extends="org.terraswarm.JSAccessor">
  <version>0.1</version>
  <author>Patricia Derler, Edward A. Lee, Ben Zhang</author>
  <requires name="eventbus"/>
  <input
    name="address"
    value="topic"
    type="string"
    description="The event bus address, which is the name of the event stream. This defaults to 'topic'."/>
  <input
    name="message"
    description="The message to the bus."/>       
  <input
    name="broadcast"
    value="true"
    type="boolean"
    description="True to broadcast the message to all subscribers. False to send to exactly one subscriber, in a roughly round-robin fashion."/>
  <input
    name="busHost"
    value=""
    type="string"
    description="The name of the network interface to use for the Vert.x event bus. A blank string is interpreted as 'localhost'."/>
  <input
    name="busHostPort"
    value="0"
    type="int"
    description="The port for the Vert.x event bus. A value of 0 indicates to just find an available port."/>
  <output
    name="reply"
    type="string"
    description="The reply, if any, received after a point-to-point send (where broadcast == false)."/>
  <documentation type="text/html">
    <![CDATA[
    This accessor publishes to a Vert.x event bus. The input can be any data type
    supported by accessors that has a string representation in JSON syntax. The
    published even will be a string in JSON format.
    <p>
    The busHost is the name of the network interface through which to connect to the Vert.x event bus cluster.
    The busHostPort is the port to use for this.
    These two inputs are examined only at initialization time.
	]]>
  </documentation>
  <script type="text/javascript">
    // <![CDATA[
    
var eventbus = require('eventbus');
var bus;

exports.initialize = function() {
  var port = get(busHostPort);
  var host = get(busHost);
  bus = new eventbus.VertxBus({'port':port, 'host':host});
}

var replyHandler = function(message) {
   send(message, reply);
}

addInputHandler(function() {
  var topic = get(address);
  var msg = get(message);
  var all = get(broadcast);
  if (msg) {
    if (all) {
      bus.publish(topic, JSON.stringify(msg));
    } else {
      bus.send(topic, JSON.stringify(msg), replyHandler);
    }
  }
}, message);

exports.wrapup = function() {
  bus.unsubscribe();
}

	//  ]]>
  </script>
</class>
