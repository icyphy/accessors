var fs = require('fs');

Mobile('log').call("JXcore is up and running!");

Mobile('getBuffer').registerSync(function() {
  Mobile('log').call("getBuffer is called!!!");
  var buffer = new Buffer(25000);
  buffer.fill(58);

  // send back a buffer
  return buffer;
});

Mobile('asyncPing').registerAsync(function(message, callback){
  setTimeout(function() {
    callback("Pong:" + message);
  }, 500);
});

try {
// requiring a node module
  var jsnice = require('json-nice');

//using it
  var obj = {a: 1, b: 2};
  Mobile('log').call(jsnice(obj));
} catch(e) {
  Mobile('log').call("Seems like you didn't copy node_modules folder from sample/jxcore");
}

// iOS user directory
Mobile('log').call("userPath", fs.readdirSync(process.userPath));

var path = require('path');
var accessorPath;
try{
	accessorPath = [path.join(__dirname)];
	Mobile('log').call('path module is present and installed');
}
catch(e){
	Mobile('log').call('path module is not present or installed');
}

function fail(e) {
    console.log("FileSystem Error");
    console.dir(e);
}

function gotFile(fileEntry) {

    fileEntry.file(function(file) {
        var reader = new FileReader();

        reader.onloadend = function(e) {
            Mobile('log').call("Text is: "+this.result);
        }

        reader.readAsText(file);
    });

}

/*
getAccessorCode = function(name) {
    var code;
    // Append a '.js' to the name, if needed.
    if (name.indexOf('.js') !== name.length - 3) {
        name += '.js';
    }
    for (var i = 0; i < accessorPath.length; i++) {
        var location = path.join(accessorPath[i], name);
        try {
            if(typeof fs == 'undefined')
	    {
		Mobile('log').call('fs is undefined');
   	    }
	    else
	    {
		Mobile('log').call('fs is defined with location ' + location);
  	    }

            Mobile('log').call('Writing reading accessor at: ' + location);
	    window.resolveLocalFileSystemURL(cordova.file.applicationDirectory + "www/index.html", gotFile, fail);
            //code = fs.readFileSync('./TestAccessor.js', 'utf8');
            code = fs.readFileSync('www/index.html', 'utf8');
	    fs.writeFile('atul-js-temp.txt', 'test data');
            Mobile('log').call('Reading accessor at: ' + location);
        } catch(error) {
            Mobile('log').call('Reading didn\'t work ' + location);
            Mobile('log').call(error);
            continue;
        }
    }
    if (!code) {
	Mobile('log').call('Exception because code not found');
        throw('Accessor ' + name + ' not found on path: ' + accessorPath);
    }
    return code;
};

getAccessorCode('TestAccessor');
*/
var path = require('path');
var commonHost = require('./commonHost');
var accessorPath = [path.join(__dirname)];
var accessors;
getAccessorCode = function(name) {
    var code;
    // Append a '.js' to the name, if needed.
    if (name.indexOf('.js') !== name.length - 3) {
        name += '.js';
    }
    for (var i = 0; i < accessorPath.length; i++) {
        var location = path.join(accessorPath[i], name);
        try {
            code = fs.readFileSync(location, 'utf8');
            console.log('Reading accessor at: ' + location);
        } catch(error) {
            console.log(error);
            continue;
        }
    }
    if (!code) {
        throw('Accessor ' + name + ' not found on path: ' + accessorPath);
    }
    return code;
};

instantiate = function(accessorName, accessorClass) {
    // FIXME: The bindings should be a bindings object where require == a requireLocal
    // function that searches first for local modules.
    var bindings = {
       'require': require,
    };
    // var bindings = [];
    var instance = new commonHost.instantiateAccessor(
            'Instance1', 'TestAccessor', getAccessorCode, bindings);
    Mobile('log').call('Instantiated accessor ' + accessorName + ' with class ' + accessorClass);
    return instance;
};


instantiateAndInitialize = function(accessorNames) {
    var accessors = [];
    var length = accessorNames.length;
    for (index = 0; index < length; ++index) {
        // The name of the accessor is basename of the accessorClass.
        var accessorClass = accessorNames[index];
        // For example, if the accessorClass is
        // test/TestComposite, then the accessorName will be
        // TestComposite.

        var startIndex = (accessorClass.indexOf('\\') >= 0 ? accessorClass.lastIndexOf('\\') : accessorClass.lastIndexOf('/'));
        var accessorName = accessorClass.substring(startIndex);
        if (accessorName.indexOf('\\') === 0 || accessorName.indexOf('/') === 0) {
            accessorName = accessorName.substring(1);
        }
        // If the same accessorClass appears more than once in the
        // list of arguments, then use different names.
        // To replicate: node nodeHostInvoke.js test/TestComposite test/TestComposite
        if (index > 0) {
            accessorName += "_" + (index - 1);
        }
        var accessor = instantiate(accessorName, accessorClass);
        // Push the top level accessor so that we can call wrapup later.
        accessors.push(accessor);
        accessor.initialize();
    }
    return accessors;
};


stop = function() {
    console.log("nodeHost.js: stop() invoked");
    process.exit();
}

Accessor = commonHost.Accessor;

provideInput = commonHost.provideInput;
setParameter = commonHost.setParameter;

// In case this gets used a module, create an exports object.
exports = {
    'Accessor': Accessor,
    'getAccessorCode': getAccessorCode,
    'instantiate': instantiate,
    'instantiateAndInitialize': instantiateAndInitialize,
    'provideInput': commonHost.provideInput,
    'setParameter': commonHost.setParameter,
};

var a = instantiate('TestInstance', 'TestAccessor');
a.initialize();
Mobile('log').call(a.inputList);
a.provideInput('untyped', 'hello world');
a.react();
Mobile('log').call(a.outputList);
Mobile('log').call(a.latestOutput('typeOfUntyped'));
Mobile('log').call(a.latestOutput('jsonOfUntyped'));
