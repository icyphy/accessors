/*
 * Copyright (c) 2016, Regents of the University of California
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * IOTAUTH_COPYRIGHT_VERSION_1
 */

/**
 * Common socket module for entity server and client in IoT JavaScript module.
 * @author Hokeun Kim
 */

"use strict";

// local modules
var common = require('./common');
var msgType = common.msgType;

///////////////////////////////////////////////////////////////////
////     Common socket class for entity server and client      ////

/*
socketEventHandlers = {
    onWrite,
    onEnd
}
*/
var IoTSecureSocket = function(socketEventHandlers, sessionKey, sessionCryptoSpec) {
    this.socketEventHandlers = socketEventHandlers;
    this.sessionKey = sessionKey;
    // update absValidity since its use using relValidity, and delete relValidity
    this.sessionKey.absValidity = new Date(new Date().getTime() + this.sessionKey.relValidity);
    delete (this.sessionKey).relValidity;

    this.sessionCryptoSpec = sessionCryptoSpec;
    this.writeSeqNum = 0;
    this.readSeqNum = 0;
};

IoTSecureSocket.prototype.close = function() {
    this.socketEventHandlers.onEnd();
};

IoTSecureSocket.prototype.checkSessionKeyValidity = function() {
    if (this.sessionKey.absValidity > new Date()) {
        return true;
    }
    return false;
};

// to be called from outside of iotAuth module
IoTSecureSocket.prototype.send = function(data) {
    if (!this.checkSessionKeyValidity()) {
        console.log('Session key expired!');
        return false;
    }
    var enc = common.serializeEncryptSessionMessage(
        {seqNum: this.writeSeqNum, data: data}, this.sessionKey, this.sessionCryptoSpec);
    this.writeSeqNum++;
    var buf = common.serializeIoTSP({
        msgType: msgType.SECURE_COMM_MSG,
        payload: enc
    });
    this.socketEventHandlers.onWrite(buf);
    return true;
};

// to be called from outside of iotAuth module
IoTSecureSocket.prototype.sendRaw = function(rawData) {
    this.socketEventHandlers.onWrite(rawData);
    return true;
};

// to be called inside of iotAuth module
IoTSecureSocket.prototype.receive = function(payload) {
    if (!this.checkSessionKeyValidity()) {
        return {success: false, error: 'Session key expired!'};
    }

    var data;
    try {
        data = common.symmetricDecryptAuthenticate(payload, this.sessionKey,
            this.sessionCryptoSpec);
    }
    catch (err) {
        return {success: false, error: err};
    }

    var ret = common.parseSessionMessage(data);
    
    if (ret.seqNum != this.readSeqNum) {
        return {success: false, error: 'seqNum does not match! expected: ' + this.readSeqNum + ' received: ' + ret.seqNum};
    }
    this.readSeqNum++;
    console.log('Received seqNum: ' + ret.seqNum);
    return {success: true, data: ret.data};
};

IoTSecureSocket.prototype.inspect = function() {
    var ret = 'sessionKey: ' + this.sessionKey.toString();
    ret += ' writeSeqNum: '+ this.writeSeqNum;
    ret += ' readSeqNum: '+ this.readSeqNum;
    return ret;
};

module.exports = IoTSecureSocket;
