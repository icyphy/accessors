
// Copyright (c) 2016 The Regents of the University of California.
// All rights reserved.

// Permission is hereby granted, without written agreement and without
// license or royalty fees, to use, copy, modify, and distribute this
// software and its documentation for any purpose, provided that the above
// copyright notice and the following two paragraphs appear in all copies
// of this software.

// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
// SUCH DAMAGE.

// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
// PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
// ENHANCEMENTS, OR MODIFICATIONS.

/**
 * Module supporting the Global Data Plane.
 *
 * @module gdp
 * @author Christopher Brooks
 * @version $$Id$$
 */

// Stop extra messages from jslint.  Note that there should be no
// space between the / and the * and global.
/*globals exports, Java, require, util */
/*jshint globalstrict: true */
'use strict';

var gdpjs = require('@terraswarm/gdp');
var EventEmitter = require('events').EventEmitter;
var util = require('util');

var gclH;
var os = require('os');

/**
 * Open a Global Data Plane log.
 * @param name The external, possibly human readable name.
 * @param mode The mode (0: read only, 1: write only, 2: read/write)
 */
exports.GDP = function (name, iomode) {
    console.log("gdp.js: GDP()");
    this.gclh = gdpjs.gdp_gcl_open(name, iomode);
    this.name = name;
}

util.inherits(exports.GDP, EventEmitter);

exports.GDP.prototype.append = function (data) {
    // FIXME: gdpdAddress should be a parameter.
    var gdpdAddress = null;
    var gclName = this.name;
    var logdxname = os.hostname();
    var gclAppend = true;
    var recordSource = 0;
    var recordArray = new Array(data);
    var consoleOut = false;
    var recordArrayOut = new Array(1);
    var returnValue = gdpjs.write_gcl_records(gdpdAddress, gclName, logdxname, gclAppend,
                                        recordSource, recordArray, consoleOut,
                                        recordArrayOut);
    if (!returnValue.error_isok) {
        throw new Error("gdp.js: append() failed: " + returnValue.error_msg + ", gcl_name: " + returnValue.gclName);
    }
};

exports.GDP.prototype.read = function (recno) {
    console.log("node_modules/gdp/gdp.js:read(" + recno + ")");
    var gdpd_addr = gdpd_addr;
    var gcl_name = this.name
    var gcl_firstrec = recno;
    var gcl_numrecs = 1;
    var gcl_subscribe = false;
    var gcl_multiread = false;
    var conout = true; // recdest = -1 so output to console.log()
    var gdp_event_cbfunc = null; // no callback needed when just logging
    var wait_for_events = true; // wait indefinitely in read_gcl_records() for
    var data = gdpjs.read_gcl_records(gdpd_addr, gcl_name,
        gcl_firstrec, gcl_numrecs,
        gcl_subscribe, gcl_multiread, /*recdest,*/
        conout, gdp_event_cbfunc,
        wait_for_events
    );
    if (data.records.length > 0) {
        return data.records[0].value;
    } else {
        return null;
    }
};

exports.GDP.prototype.setDebugLevel = function (debugLevel) {
    console.log("gdp.js: setDebugLevel()");
    gdpjs.ep_dbg_set(debugLevel)
}

exports.GDP.prototype.subscribe = function (startrec, numrecs, timeout) {
    //this.helper.subscribe(this, startrec, numrecs, timeout);
    throw new Error("accessors/web/hosts/node/node_modules/gdp/gdp.js: " +
                    "subscribe() not implemented");
};

exports.GDP.prototype.getNextData = function (timeout_msec) {
    //return this.helper.getNextData(timeout_msec);
    throw new Error("accessors/web/hosts/node/node_modules/gdp/gdp.js: " +
                    "getNextData() not implemented");
};
