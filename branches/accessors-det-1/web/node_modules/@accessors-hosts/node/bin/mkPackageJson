#!/bin/sh
# mkPackageJson
# $Id: mkAccessorNodeModule 1325 2017-02-06 22:42:51Z cxh $
# Usage: mkPackageJson node-module
#
# This script is used to build a skeleton of a node module for use with Accessors.
# See https://www.icyphy.org/accessors/wiki/Main/HowToCreateANodeModule

YEAR=`date +%Y`
copyright="// Copyright (c) $YEAR The Regents of the University of California.
// All rights reserved.

// Permission is hereby granted, without written agreement and without
// license or royalty fees, to use, copy, modify, and distribute this
// software and its documentation for any purpose, provided that the above
// copyright notice and the following two paragraphs appear in all copies
// of this software.

// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
// SUCH DAMAGE.

// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
// PROVIDED HEREUNDER IS ON AN \"AS IS\" BASIS, AND THE UNIVERSITY OF
// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
// ENHANCEMENTS, OR MODIFICATIONS."

if [ $# -ne 1 ]; then
   echo "$0: Usage: $0 node-module"
   echo "$0: exiting."
   exit 1
fi
module=$1

echo '$module' | grep -q '[A-Z]' 
status=#?
if [ $status = 0 ]; then
    echo "$0: npm module names cannot have upper case names.  Use hyphen-separated names.";
    exit 3
fi


binDirectory=`dirname $0`
accessors=`cd $binDirectory/../../..; pwd`

if [ ! -d $accessors ]; then
    echo "$0: could not find the accessors directory at $accessors? Exiting."
    exit 10
fi

#cd $accessors/node_modules/

# if [ ! -d $accessors/$module ]; then
#     echo "$0: Warning - $accessors/$module does not exist?"
#     echo " a node module for an accessor that does not exist?"
#     exit 11
# fi    

# moduleDirectory="$accessors/hosts/node/node_modules/$module"
#if [ ! -d $module ]; then
#    echo "$0: $module already exists. Exiting."
#    exit 12
#fi

#mkdir $moduleDirectory


# A shell function that takes a user id and sets the nameAndEmail
# variable to a name and email address.
emailToName() {
    case $1 in
        beth@berkeley.edu)
            nameAndEmail='Beth Osyk <beth@berkeley.edu>'
            ;;      
        chadlia.jerad)
            nameAndEmail='Chadlia Jerad <chadlia.jerad@berkeley.edu>'
            ;;
        cxh)
            nameAndEmail='Christopher Brooks <cxh@eecs.berkeley.edu>'
            ;;      
        eal)
            nameAndEmail='Edward A. Lee <eal@berkeley.edu>'
            ;;      
        ilyaforpresident@berkeley.edu)
            nameAndEmail='Ilya Rostovtsev <ilyaforpresident@berkeley.edu>'
            ;;
        sandur2@illinois.edu)        
            nameAndEmail='Atul Sandur <sandur2@illinois.edu>'
            ;;
        *)
            nameAndEMail="<$1>"
            ;;
    esac
}
        
# Get the name of the creator of the module directory.
directoryCreator=`svn log --quiet $module | awk '/^r/ {print $3}' | tail -1`
emailToName $directoryCreator
author=$nameAndEmail

contributorNamesFile=/tmp/mkPackageJson.contributorNames.$$
rm -f $contributorNamesFile
contributors=`svn log --quiet $module | awk '/^r/ {print $3}' | sort | uniq`
for contributor in $contributors
do
    emailToName $contributor
    if [ "$nameAndEmail" != "$author" ]; then
        echo $nameAndEmail >> $contributorNamesFile
    fi
done


contributorNames=`sort $contributorNamesFile | awk ' NR == 1 { printf("        \"%s\"", $0) }
                  NR > 1 {printf(",\n        \"%s\"", $0) }
'`

files=`cd $module; ls -1 | egrep -v "(package.json|README|CHANGES|CHANGELOG|HISTORY|LICENSE|NOTICE|$module.js)" | awk ' NR == 1 { printf("        \"%s\"", $1) }
                  NR > 1 {printf(",\n        \"%s\"", $1) }
'`

shortModule=`echo $module | sed 's@.*/\([^/]*$\)@\1@'`
shortModuleName=`echo $shortModule | sed 's@-@ @g'`

main=$shortModule.js
if [ ! -f $module/$main ]; then
    # Look for files like nodeHost.js
    main=`(cd $module; ls -1 $shortModule*.js | head -1)`
fi
if [ ! -f $module/$main ]; then
    echo "$0: Could not find main file?"
fi

### Create package.json
packageFile=$module/package.json
cat > $packageFile <<EOF
{
  "name": "$module",
  "author": "$author",
  "contributors" : [
$contributorNames  
  ],
  "description": "A $shortModuleName for Accessors (actor-oriented proxies for IoT)",
  "files": [
$files
  ],
  "keywords": [
        "accessors",
        "actor",
        "IoT",
        "$shortModuleName"
   ],
  "license": "BSD-3-Clause",
  "main": "$main",
  "repository": {
        "type": "svn",
        "url": "https://repo.eecs.berkeley.edu/svn-anon/projects/terraswarm/accessors/trunk/accessors"
   },
   "version": "0.1.0"
}
EOF

rm -f $contributorNamesFile
